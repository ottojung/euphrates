;;;; Copyright (C) 2023, 2024  Otto Jung
;;;; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; version 3 of the License. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.

;; This lexer has a category for each ASCII character that is printable.
;; For any other character it outputs category 'OTHER.
(define (make-parselynn:latin initial-input)
  (define offset 0)
  (define linenum 0)
  (define colnum 0)
  (define input
    (cond
     ((port? initial-input) input)
     ((string? initial-input) (open-input-string initial-input))
     (else (raisu* :type 'bad-input-type
                   :message "Lexer expected a port or a string as input, but got something else"
                   :args (list initial-input)))))


  (lambda _

    (define c (read-char input))
    (define location
      (make-source-location "*stdin*" linenum colnum offset 1))

    (let ((nl? (equal? c #\newline)))
      (set! offset (+ offset 1))
      (set! linenum (if nl? (+ linenum 1) linenum))
      (set! colnum (if nl? 0 (+ 1 colnum))))

    (if (or (eof-object? c) (not input))
        (begin
          (when (string? initial-input)
            (close-port input)
            (set! input #f))
          '*eoi*)
        (case c

          ((#\newline) (make-lexical-token '<NEWLINE location c))
          ((#\space)   (make-lexical-token '<SPACE   location c))
          ((#\tab)     (make-lexical-token '<TAB     location c))
          ((#\')       (make-lexical-token '<QUOTE   location c))
          ((#\")       (make-lexical-token '<QUOTE2  location c))
          ((#\#)       (make-lexical-token '<HASH    location c))
          ((#\()       (make-lexical-token '<LPAREN  location c))
          ((#\))       (make-lexical-token '<RPAREN  location c))
          ((#\[)       (make-lexical-token '<LBRAKT  location c))
          ((#\])       (make-lexical-token '<RBRAKT  location c))
          ((#\{)       (make-lexical-token '<LBRACE  location c))
          ((#\})       (make-lexical-token '<RBRACE  location c))
          ((#\;)       (make-lexical-token '<SEMICOL location c))
          ((#\|)       (make-lexical-token '<PIPE    location c))
          ((#\`)       (make-lexical-token '<QUASIQ  location c))
          ((#\,)       (make-lexical-token '<COMMA   location c))
          ((#\.)       (make-lexical-token '<DOT     location c))

          ((#\A)       (make-lexical-token '<A       location c))
          ((#\B)       (make-lexical-token '<B       location c))
          ((#\C)       (make-lexical-token '<C       location c))
          ((#\D)       (make-lexical-token '<D       location c))
          ((#\E)       (make-lexical-token '<E       location c))
          ((#\F)       (make-lexical-token '<F       location c))
          ((#\G)       (make-lexical-token '<G       location c))
          ((#\H)       (make-lexical-token '<H       location c))
          ((#\I)       (make-lexical-token '<I       location c))
          ((#\J)       (make-lexical-token '<J       location c))
          ((#\K)       (make-lexical-token '<K       location c))
          ((#\L)       (make-lexical-token '<L       location c))
          ((#\M)       (make-lexical-token '<M       location c))
          ((#\N)       (make-lexical-token '<N       location c))
          ((#\O)       (make-lexical-token '<O       location c))
          ((#\P)       (make-lexical-token '<P       location c))
          ((#\Q)       (make-lexical-token '<Q       location c))
          ((#\R)       (make-lexical-token '<R       location c))
          ((#\S)       (make-lexical-token '<S       location c))
          ((#\T)       (make-lexical-token '<T       location c))
          ((#\U)       (make-lexical-token '<U       location c))
          ((#\V)       (make-lexical-token '<V       location c))
          ((#\W)       (make-lexical-token '<W       location c))
          ((#\X)       (make-lexical-token '<X       location c))
          ((#\Y)       (make-lexical-token '<Y       location c))
          ((#\Z)       (make-lexical-token '<Z       location c))
          ((#\a)       (make-lexical-token '<a       location c))
          ((#\b)       (make-lexical-token '<b       location c))
          ((#\c)       (make-lexical-token '<c       location c))
          ((#\d)       (make-lexical-token '<d       location c))
          ((#\e)       (make-lexical-token '<e       location c))
          ((#\f)       (make-lexical-token '<f       location c))
          ((#\g)       (make-lexical-token '<g       location c))
          ((#\h)       (make-lexical-token '<h       location c))
          ((#\i)       (make-lexical-token '<i       location c))
          ((#\j)       (make-lexical-token '<j       location c))
          ((#\k)       (make-lexical-token '<k       location c))
          ((#\l)       (make-lexical-token '<l       location c))
          ((#\m)       (make-lexical-token '<m       location c))
          ((#\n)       (make-lexical-token '<n       location c))
          ((#\o)       (make-lexical-token '<o       location c))
          ((#\p)       (make-lexical-token '<p       location c))
          ((#\q)       (make-lexical-token '<q       location c))
          ((#\r)       (make-lexical-token '<r       location c))
          ((#\s)       (make-lexical-token '<s       location c))
          ((#\t)       (make-lexical-token '<t       location c))
          ((#\u)       (make-lexical-token '<u       location c))
          ((#\v)       (make-lexical-token '<v       location c))
          ((#\w)       (make-lexical-token '<w       location c))
          ((#\x)       (make-lexical-token '<x       location c))
          ((#\y)       (make-lexical-token '<y       location c))
          ((#\z)       (make-lexical-token '<z       location c))
          ((#\0)       (make-lexical-token '<0       location c))
          ((#\1)       (make-lexical-token '<1       location c))
          ((#\2)       (make-lexical-token '<2       location c))
          ((#\3)       (make-lexical-token '<3       location c))
          ((#\4)       (make-lexical-token '<4       location c))
          ((#\5)       (make-lexical-token '<5       location c))
          ((#\6)       (make-lexical-token '<6       location c))
          ((#\7)       (make-lexical-token '<7       location c))
          ((#\8)       (make-lexical-token '<8       location c))
          ((#\9)       (make-lexical-token '<9       location c))
          ((#\+)       (make-lexical-token '<+       location c))
          ((#\/)       (make-lexical-token '</       location c))
          ((#\_)       (make-lexical-token '<_       location c))
          ((#\:)       (make-lexical-token '<:       location c))
          ((#\@)       (make-lexical-token '<@       location c))
          ((#\=)       (make-lexical-token '<=       location c))
          ((#\%)       (make-lexical-token '<%       location c))
          ((#\-)       (make-lexical-token '<-       location c))
          ((#\*)       (make-lexical-token '<*       location c))
          ((#\?)       (make-lexical-token '<?       location c))
          ((#\^)       (make-lexical-token '<^       location c))
          ((#\\)       (make-lexical-token '<\       location c))
          ((#\~)       (make-lexical-token '<~       location c))
          ((#\!)       (make-lexical-token '<!       location c))
          ((#\&)       (make-lexical-token '<&       location c))
          ((#\<)       (make-lexical-token '<<       location c))
          ((#\>)       (make-lexical-token '<>       location c))
          ((#\$)       (make-lexical-token '<$       location c))

          (else                 (make-lexical-token '<OTHER   location c))))))
