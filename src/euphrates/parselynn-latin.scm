;;;; Copyright (C) 2023, 2024  Otto Jung
;;;; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; version 3 of the License. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.

;; This lexer has a category for each ASCII character that is printable.
;; For any other character it outputs category 'OTHER.
(define (make-parselynn:latin initial-input)
  (define offset 0)
  (define linenum 0)
  (define colnum 0)
  (define input
    (cond
     ((port? initial-input) input)
     ((string? initial-input) (open-input-string initial-input))
     (else (raisu* :type 'bad-input-type
                   :message "Lexer expected a port or a string as input, but got something else"
                   :args (list initial-input)))))


  (lambda _

    (define c (read-char input))
    (define location
      (make-source-location "*stdin*" linenum colnum offset 1))

    (let ((nl? (equal? c #\newline)))
      (set! offset (+ offset 1))
      (set! linenum (if nl? (+ linenum 1) linenum))
      (set! colnum (if nl? 0 (+ 1 colnum))))

    (if (or (eof-object? c) (not input))
        (begin
          (when (string? initial-input)
            (close-port input)
            (set! input #f))
          '*eoi*)
        (case c

          ((#\newline) (parselynn:token:make '<NEWLINE location c))
          ((#\space)   (parselynn:token:make '<SPACE   location c))
          ((#\tab)     (parselynn:token:make '<TAB     location c))
          ((#\')       (parselynn:token:make '<QUOTE   location c))
          ((#\")       (parselynn:token:make '<QUOTE2  location c))
          ((#\#)       (parselynn:token:make '<HASH    location c))
          ((#\()       (parselynn:token:make '<LPAREN  location c))
          ((#\))       (parselynn:token:make '<RPAREN  location c))
          ((#\[)       (parselynn:token:make '<LBRAKT  location c))
          ((#\])       (parselynn:token:make '<RBRAKT  location c))
          ((#\{)       (parselynn:token:make '<LBRACE  location c))
          ((#\})       (parselynn:token:make '<RBRACE  location c))
          ((#\;)       (parselynn:token:make '<SEMICOL location c))
          ((#\|)       (parselynn:token:make '<PIPE    location c))
          ((#\`)       (parselynn:token:make '<QUASIQ  location c))
          ((#\,)       (parselynn:token:make '<COMMA   location c))
          ((#\.)       (parselynn:token:make '<DOT     location c))

          ((#\A)       (parselynn:token:make '<A       location c))
          ((#\B)       (parselynn:token:make '<B       location c))
          ((#\C)       (parselynn:token:make '<C       location c))
          ((#\D)       (parselynn:token:make '<D       location c))
          ((#\E)       (parselynn:token:make '<E       location c))
          ((#\F)       (parselynn:token:make '<F       location c))
          ((#\G)       (parselynn:token:make '<G       location c))
          ((#\H)       (parselynn:token:make '<H       location c))
          ((#\I)       (parselynn:token:make '<I       location c))
          ((#\J)       (parselynn:token:make '<J       location c))
          ((#\K)       (parselynn:token:make '<K       location c))
          ((#\L)       (parselynn:token:make '<L       location c))
          ((#\M)       (parselynn:token:make '<M       location c))
          ((#\N)       (parselynn:token:make '<N       location c))
          ((#\O)       (parselynn:token:make '<O       location c))
          ((#\P)       (parselynn:token:make '<P       location c))
          ((#\Q)       (parselynn:token:make '<Q       location c))
          ((#\R)       (parselynn:token:make '<R       location c))
          ((#\S)       (parselynn:token:make '<S       location c))
          ((#\T)       (parselynn:token:make '<T       location c))
          ((#\U)       (parselynn:token:make '<U       location c))
          ((#\V)       (parselynn:token:make '<V       location c))
          ((#\W)       (parselynn:token:make '<W       location c))
          ((#\X)       (parselynn:token:make '<X       location c))
          ((#\Y)       (parselynn:token:make '<Y       location c))
          ((#\Z)       (parselynn:token:make '<Z       location c))
          ((#\a)       (parselynn:token:make '<a       location c))
          ((#\b)       (parselynn:token:make '<b       location c))
          ((#\c)       (parselynn:token:make '<c       location c))
          ((#\d)       (parselynn:token:make '<d       location c))
          ((#\e)       (parselynn:token:make '<e       location c))
          ((#\f)       (parselynn:token:make '<f       location c))
          ((#\g)       (parselynn:token:make '<g       location c))
          ((#\h)       (parselynn:token:make '<h       location c))
          ((#\i)       (parselynn:token:make '<i       location c))
          ((#\j)       (parselynn:token:make '<j       location c))
          ((#\k)       (parselynn:token:make '<k       location c))
          ((#\l)       (parselynn:token:make '<l       location c))
          ((#\m)       (parselynn:token:make '<m       location c))
          ((#\n)       (parselynn:token:make '<n       location c))
          ((#\o)       (parselynn:token:make '<o       location c))
          ((#\p)       (parselynn:token:make '<p       location c))
          ((#\q)       (parselynn:token:make '<q       location c))
          ((#\r)       (parselynn:token:make '<r       location c))
          ((#\s)       (parselynn:token:make '<s       location c))
          ((#\t)       (parselynn:token:make '<t       location c))
          ((#\u)       (parselynn:token:make '<u       location c))
          ((#\v)       (parselynn:token:make '<v       location c))
          ((#\w)       (parselynn:token:make '<w       location c))
          ((#\x)       (parselynn:token:make '<x       location c))
          ((#\y)       (parselynn:token:make '<y       location c))
          ((#\z)       (parselynn:token:make '<z       location c))
          ((#\0)       (parselynn:token:make '<0       location c))
          ((#\1)       (parselynn:token:make '<1       location c))
          ((#\2)       (parselynn:token:make '<2       location c))
          ((#\3)       (parselynn:token:make '<3       location c))
          ((#\4)       (parselynn:token:make '<4       location c))
          ((#\5)       (parselynn:token:make '<5       location c))
          ((#\6)       (parselynn:token:make '<6       location c))
          ((#\7)       (parselynn:token:make '<7       location c))
          ((#\8)       (parselynn:token:make '<8       location c))
          ((#\9)       (parselynn:token:make '<9       location c))
          ((#\+)       (parselynn:token:make '<+       location c))
          ((#\/)       (parselynn:token:make '</       location c))
          ((#\_)       (parselynn:token:make '<_       location c))
          ((#\:)       (parselynn:token:make '<:       location c))
          ((#\@)       (parselynn:token:make '<@       location c))
          ((#\=)       (parselynn:token:make '<=       location c))
          ((#\%)       (parselynn:token:make '<%       location c))
          ((#\-)       (parselynn:token:make '<-       location c))
          ((#\*)       (parselynn:token:make '<*       location c))
          ((#\?)       (parselynn:token:make '<?       location c))
          ((#\^)       (parselynn:token:make '<^       location c))
          ((#\\)       (parselynn:token:make '<\       location c))
          ((#\~)       (parselynn:token:make '<~       location c))
          ((#\!)       (parselynn:token:make '<!       location c))
          ((#\&)       (parselynn:token:make '<&       location c))
          ((#\<)       (parselynn:token:make '<<       location c))
          ((#\>)       (parselynn:token:make '<>       location c))
          ((#\$)       (parselynn:token:make '<$       location c))

          (else                 (parselynn:token:make '<OTHER   location c))))))
