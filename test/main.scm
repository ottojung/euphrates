
%run guile

%use (get-directory-name) "./src/get-directory-name.scm"
%use (get-current-source-file-path) "./src/get-current-source-file-path.scm"
%use (append-posix-path) "./src/append-posix-path.scm"
%use (run-comprocess/p-default) "./src/run-comprocess-p-default.scm"
%use (make-uni-spinlock) "./src/uni-spinlock.scm"
%use (debug) "./src/debug.scm"
%use (debugv) "./src/debugv.scm"
%use (with-ignore-errors!) "./src/with-ignore-errors.scm"
%use (random-choice) "./src/random-choice.scm"
%use (printable/alphabet) "./src/printable-alphabet.scm"
%use (catch-any) "./src/catch-any.scm"
%use (assert) "./src/assert.scm"
%use (assert=) "./src/assert-equal.scm"
%use (make-queue queue-empty? queue-peek queue-push! queue-pop! queue->list) "./src/queue.scm"
%use (with-dynamic) "./src/with-dynamic.scm"
%use (lazy-parameter) "./src/lazy-parameter.scm"
%use (~a) "./src/tilda-a.scm"
%use (~s) "./src/tilda-s.scm"
%use (hash->mdict ahash->mdict mdict mdict-has? mdict-set! mdict->alist mdict-keys) "./src/mdict.scm"
%use (string->words) "./src/string-to-words.scm"
%use (words->string) "./src/words-to-string.scm"
%use (list->tree) "./src/list-to-tree.scm"
%use (list-traverse) "./src/list-traverse.scm"
%use (range) "./src/range.scm"
%use (use-svars with-svars with-package make-package make-static-package) "./src/package.scm"
%use (letin) "./src/letin.scm"
%use (list-intersperse) "./src/list-intersperse.scm"
%use (path-replace-extension) "./src/path-replace-extension.scm"
%use (apploop) "./src/apploop.scm"
%use (string-trim-chars) "./src/string-trim-chars.scm"
%use (file-or-directory-exists?) "./src/file-or-directory-exists-q.scm"
%use (get-directory-name) "./src/get-directory-name.scm"
%use (directory-files) "./src/directory-files.scm"
%use (directory-files-rec) "./src/directory-files-rec.scm"
%use (directory-tree) "./src/directory-tree.scm"
%use (hashmap) "./src/hashmap.scm"
%use (hashmap-ref hashmap->alist) "./src/ihashmap.scm"
%use (make-hashset hashset-equal? hashset-difference) "./src/ihashset.scm"
%use (assert=HS) "./src/assert-equal-hs.scm"
%use (list-permutations) "./src/list-permutations.scm"
%use (list-combinations) "./src/list-combinations.scm"
%use (cartesian-product) "./src/cartesian-product.scm"
%use (list-insert-at) "./src/list-insert-at.scm"
%use (list-deduplicate) "./src/list-deduplicate.scm"
%use (list-break) "./src/list-break.scm"
%use (list-tag list-untag) "./src/list-tag.scm"
%use (list-tag/next list-untag/next) "./src/list-tag-next.scm"
%use (comp appcomp) "./src/comp.scm"
%use (make-regex-machine*) "./src/regex-machine.scm"
%use (make-cfg-machine) "./src/cfg-machine.scm"
%use (compile-regex-cli:IR->Regex compile-regex-cli:make-IR) "./src/compile-regex-cli.scm"
%use (make-cli lambda-cli with-cli make-cli-with-handler) "./src/define-cli.scm"
%use (command-line-argumets/p) "./src/command-line-arguments-p.scm"
%use (system-re) "./src/system-re.scm"
%use (number->number-list number-list->number number->number-list) "./src/number-list.scm"
%use (convert-number-base) "./src/convert-number-base.scm"
%use (define-property) "./src/properties.scm"
%use (seconds->time-string) "./src/time-to-string.scm"
%use (time-get-current-unixtime) "./src/time-get-current-unixtime.scm"
%use (time-get-monotonic-nanoseconds-timestamp) "./src/time-get-monotonic-nanoseconds-timestamp.scm"
%use (path-without-extension) "./src/path-without-extension.scm"
%use (path-extension) "./src/path-extension.scm"
%use (path-extensions) "./src/path-extensions.scm"
%use (shell-quote) "./src/shell-quote.scm"
%use (immutable-hashmap) "./src/immutable-hashmap.scm"
%use (immutable-hashmap-ref immutable-hashmap-set immutable-hashmap->alist) "./src/i-immutable-hashmap.scm"
%use (list-split-on) "./src/list-split-on.scm"
%use (CFG-CLI->CFG-lang) "./src/compile-cfg-cli.scm"
%use (CFG-AST->CFG-CLI-help) "./src/compile-cfg-cli-help.scm"
%use (current-program-path/p) "./src/current-program-path-p.scm"
%use (profun-create-database profun-eval-query) "./src/profun.scm"
%use (profun-make-handler) "./src/profun-make-handler.scm"
%use (profun-handler-lambda) "./src/profun-handler-lambda.scm"
%use (profun-op-unify) "./src/profun-op-unify.scm"
%use (profun-op-separate) "./src/profun-op-separate.scm"
%use (profun-op+) "./src/profun-op-plus.scm"
%use (profun-op*) "./src/profun-op-mult.scm"
%use (profun-op-less) "./src/profun-op-less.scm"
%use (profun-op-divisible) "./src/profun-op-divisible.scm"
%use (profun-make-set) "./src/profun-make-set.scm"
%use (profun-make-tuple-set) "./src/profun-make-tuple-set.scm"
%use (profun-op-apply profun-apply-return! profun-apply-fail!) "./src/profun-op-apply.scm"
%use (profun-op-eval profun-eval-fail!) "./src/profun-op-eval.scm"
%use (list-take-while) "./src/list-take-while.scm"
%use (petri-run petri-push) "./src/petri.scm"
%use (raisu) "./src/raisu.scm"
%use (with-np-thread-env/non-interruptible) "./src/np-thread-parameterize.scm"
%use (dynamic-thread-yield) "./src/dynamic-thread-yield.scm"
%use (dynamic-thread-spawn) "./src/dynamic-thread-spawn.scm"
%use (dynamic-thread-cancel) "./src/dynamic-thread-cancel.scm"
%use (dprintln) "./src/dprintln.scm"
%use (lines->string) "./src/lines-to-string.scm"
%use (petri-lambda-net) "./src/petri-net-parse.scm"
%use (petri-profun-net) "./src/petri-net-parse-profun.scm"
%use (string-drop-n) "./src/string-drop-n.scm"
%use (string-take-n) "./src/string-take-n.scm"
%use (time-get-current-unixtime/values#p) "./src/time-get-current-unixtime-values-p.scm"
%use (date-get-current-string) "./src/date-get-current-string.scm"
%use (date-get-current-time24h-string) "./src/date-get-current-time24h-string.scm"
%use (syntax-flatten*) "./src/syntax-flatten-star.scm"
%use (syntax-append) "./src/syntax-append.scm"
%use (syntax-map) "./src/syntax-map.scm"
%use (fn) "./src/fn.scm"
%use (list-zip) "./src/list-zip.scm"
%use (list-zip-with) "./src/list-zip-with.scm"
%use (fn-tuple) "./src/fn-tuple.scm"
%use (fn-cons) "./src/fn-cons.scm"
%use (fp) "./src/fp.scm"
%use (compose-under) "./src/compose-under.scm"
%use (list-partition) "./src/list-partition.scm"
%use (string->seconds) "./src/string-to-seconds.scm"
%use (monad-make/no-cont) "./src/monad-make-no-cont.scm"
%use (monad-apply) "./src/monad-apply.scm"
%use (monadic) "./src/monadic.scm"
%use (monadic-id) "./src/monadic-id.scm"
%use (maybe-monad) "./src/maybe-monad.scm"
%use (log-monad) "./src/log-monad.scm"
%use (with-monad-left with-monad-right) "./src/monad-parameterize.scm"
%use (monadstate? monadstate-ret) "./src/monadstate.scm"
%use (lazy-monad) "./src/lazy-monad.scm"
%use (exception-monad) "./src/exception-monad.scm"
%use (identity-monad) "./src/identity-monad.scm"
%use (monad-do) "./src/monad-do.scm"
%use (monad-bind) "./src/monad-bind.scm"
%use (with-monad) "./src/with-monad.scm"
%use (list-fold) "./src/list-fold.scm"
%use (list-chunks) "./src/list-chunks.scm"
%use (list-windows) "./src/list-windows.scm"
%use (list-length=<?) "./src/list-length-geq-q.scm"
%use (list-length=) "./src/list-length-eq.scm"
%use (compose-under-par) "./src/compose-under-par.scm"
%use (print-in-window) "./src/print-in-window.scm"
%use (print-in-frame) "./src/print-in-frame.scm"
%use (string-split-3) "./src/string-split-3.scm"
%use (json-parse) "./src/json-parse.scm"
%use (make-prefixtree prefixtree-set! prefixtree-ref prefixtree-ref-closest prefixtree-ref-furthest prefixtree->tree) "./src/prefixtree.scm"
%use (list-levenshtein-distance) "./src/list-levenshtein-distance.scm"
%use (string->seconds/columned) "./src/string-to-seconds-columned.scm"
%use (url-get-hostname-and-port) "./src/url-get-hostname-and-port.scm"
%use (url-get-protocol) "./src/url-get-protocol.scm"
%use (url-get-path) "./src/url-get-path.scm"
%use (url-decompose) "./src/url-decompose.scm"
%use (url-goto) "./src/url-goto.scm"
%use (path-normalize) "./src/path-normalize.scm"
%use (catchu-case) "./src/catchu-case.scm"
%use (random-variable-name) "./src/random-variable-name.scm"
%use (big-random-int) "./src/big-random-int.scm"
%use (with-randomizer-seed) "./src/with-randomizer-seed.scm"
%use (vector-random-shuffle!) "./src/vector-random-shuffle-bang.scm"
%use (list-random-shuffle) "./src/list-random-shuffle.scm"
%use (list-group-by) "./src/list-group-by.scm"
%use (string->numstring) "./src/string-to-numstring.scm"
%use (string-plus-encode) "./src/string-plus-encode.scm"
%use (alphanum/alphabet alphanum/alphabet/index) "./src/alphanum-alphabet.scm"
%use (uri-encode) "./src/uri-encode.scm"

(display "All good\n")
