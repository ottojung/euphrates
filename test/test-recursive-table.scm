
(assert=
 (recursive-table

  + --------------------------- +
  ! 'key1          ! 1          !
  + --------------------------- +
  ! 'key2          ! 2          !
  + --------------------------- +
  ! 'key3          ! 3          !
  + --------------------------- +

  )

 (list
  '(key1 1)
  '(key2 2)
  '(key3 3)))


(let ((x 1) (y 2) (z 3)
      (a 5) (b 6) (c 7))
  (assert=
   (recursive-table
    + ----------------------------------- +
    ! 'key1          ! x          !   a   !
    + ----------------------------------- +
    ! 'key2          ! y          !   b   !
    + ----------------------------------- +
    ! 'key3          ! z          !   c   !
    + ----------------------------------- +
    )

   (list
    `(key1 ,x ,a)
    `(key2 ,y ,b)
    `(key3 ,z ,c))))


(define $ recursive-table:get)

(let ()

  (assert=
   (recursive-table

    + --------------------------- +
    ! 'key1     ! 1               !
    + --------------------------- +
    ! 'key2     ! (+ ($ 'key3) 5) !
    + --------------------------- +
    ! 'key3     ! 3               !
    + --------------------------- +

    )

   (list
    '(key1 1)
    '(key2 8)
    '(key3 3))))



(let ()

  (assert=
   (recursive-table

    + --------------------------- +
    ! 'key      ! 'value          !
    + --------------------------- +
    ! 'key1     ! 1               !
    + --------------------------- +
    ! 'key2     ! (+ ($ 'value 'key3) 5) !
    + --------------------------- +
    ! 'key3     ! 3               !
    + --------------------------- +

    )

   (list
    '(key  value)
    '(key1 1)
    '(key2 8)
    '(key3 3))))
