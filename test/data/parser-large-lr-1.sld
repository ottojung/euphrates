(define-library
  (data parser-large-lr-1)
  (export parser-large-lr-1)
  (import (scheme base) (euphrates stack))
  (begin
    (define parser-large-lr-1
      `((cqqn4gukh9w0rx195m2c
          ,'*serialized-lalr-scm-parser*)
        (vasml2yhpvo1iq0ofir7 ,'first)
        (nx8lw4j8m9qkhnks1lnb ,'lr-1-driver)
        (ill9vlxm3pyptw40uotx
          ,'(+ *
               -
               ^
               %
               n1
               n2
               n3
               n4
               n5
               n6
               n7
               n8
               n9
               n10
               n11
               n12
               n13
               n14
               n15
               n16
               n17
               n18
               n19
               n20
               n21
               n22
               n23
               n24
               n25
               n26
               n27
               n28
               n29
               n30
               n31
               n32
               n33
               n34
               n35
               n36
               n37
               n38
               n39
               n40
               n41
               n42
               n43
               n44
               n45
               n46
               n47
               n48
               n49
               n50
               n51
               n52
               n53
               n54
               n55
               n56
               n57
               n58
               n59
               n60
               n61
               n62
               n63
               n64
               n65
               n66
               n67
               n68
               n69
               n70
               n71
               n72
               n73
               n74
               n75
               n76
               n77
               n78
               n79
               n80
               n81
               n82
               n83
               n84
               n85
               n86
               n87
               n88
               n89
               n90
               n91
               n92
               n93
               n94
               n95
               n96
               n97
               n98
               n99
               n100
               n101
               n102
               n103
               n104
               n105
               n106
               n107
               n108
               n109
               n110
               n111
               n112
               n113
               n114
               n115
               n116
               n117
               n118
               n119
               n120
               n121
               n122
               n123
               n124
               n125
               n126
               n127
               n128
               n129
               n130
               n131
               n132
               n133
               n134
               n135
               n136
               n137
               n138
               n139
               n140
               n141
               n142
               n143
               n144
               n145
               n146
               n147
               n148
               n149
               n150
               n151
               n152
               n153
               n154
               n155
               n156
               n157
               n158
               n159
               n160
               n161
               n162
               n163
               n164
               n165
               n166
               n167
               n168
               n169
               n170
               n171
               n172
               n173
               n174
               n175
               n176
               n177
               n178
               n179
               n180
               n181
               n182
               n183
               n184
               n185
               n186
               n187
               n188
               n189
               n190
               n191
               n192
               n193
               n194
               n195
               n196
               n197
               n198
               n199
               n200
               n201
               n202
               n203
               n204
               n205
               n206
               n207
               n208
               n209
               n210
               n211
               n212
               n213
               n214
               n215
               n216
               n217
               n218
               n219
               n220
               n221
               n222
               n223
               n224
               n225
               n226
               n227
               n228
               n229
               n230
               n231
               n232
               n233
               n234
               n235
               n236
               n237
               n238
               n239
               n240
               n241
               n242
               n243
               n244
               n245
               n246
               n247
               n248
               n249
               n250
               n251
               n252
               n253
               n254
               n255
               n256
               n257
               n258
               n259
               n260
               n261
               n262
               n263
               n264
               n265
               n266
               n267
               n268
               n269
               n270
               n271
               n272
               n273
               n274
               n275
               n276
               n277
               n278
               n279
               n280
               n281
               n282
               n283
               n284
               n285
               n286
               n287
               n288
               n289
               n290
               n291
               n292
               n293
               n294
               n295
               n296
               n297
               n298
               n299
               n300))
        (qofpa1t73vde5nivj6d9
          ,'((expr (term op expr) (term))
             (op (+) (*) (-) (^) (%))
             (term (n1)
                   (n2)
                   (n3)
                   (n4)
                   (n5)
                   (n6)
                   (n7)
                   (n8)
                   (n9)
                   (n10)
                   (n11)
                   (n12)
                   (n13)
                   (n14)
                   (n15)
                   (n16)
                   (n17)
                   (n18)
                   (n19)
                   (n20)
                   (n21)
                   (n22)
                   (n23)
                   (n24)
                   (n25)
                   (n26)
                   (n27)
                   (n28)
                   (n29)
                   (n30)
                   (n31)
                   (n32)
                   (n33)
                   (n34)
                   (n35)
                   (n36)
                   (n37)
                   (n38)
                   (n39)
                   (n40)
                   (n41)
                   (n42)
                   (n43)
                   (n44)
                   (n45)
                   (n46)
                   (n47)
                   (n48)
                   (n49)
                   (n50)
                   (n51)
                   (n52)
                   (n53)
                   (n54)
                   (n55)
                   (n56)
                   (n57)
                   (n58)
                   (n59)
                   (n60)
                   (n61)
                   (n62)
                   (n63)
                   (n64)
                   (n65)
                   (n66)
                   (n67)
                   (n68)
                   (n69)
                   (n70)
                   (n71)
                   (n72)
                   (n73)
                   (n74)
                   (n75)
                   (n76)
                   (n77)
                   (n78)
                   (n79)
                   (n80)
                   (n81)
                   (n82)
                   (n83)
                   (n84)
                   (n85)
                   (n86)
                   (n87)
                   (n88)
                   (n89)
                   (n90)
                   (n91)
                   (n92)
                   (n93)
                   (n94)
                   (n95)
                   (n96)
                   (n97)
                   (n98)
                   (n99)
                   (n100)
                   (n101)
                   (n102)
                   (n103)
                   (n104)
                   (n105)
                   (n106)
                   (n107)
                   (n108)
                   (n109)
                   (n110)
                   (n111)
                   (n112)
                   (n113)
                   (n114)
                   (n115)
                   (n116)
                   (n117)
                   (n118)
                   (n119)
                   (n120)
                   (n121)
                   (n122)
                   (n123)
                   (n124)
                   (n125)
                   (n126)
                   (n127)
                   (n128)
                   (n129)
                   (n130)
                   (n131)
                   (n132)
                   (n133)
                   (n134)
                   (n135)
                   (n136)
                   (n137)
                   (n138)
                   (n139)
                   (n140)
                   (n141)
                   (n142)
                   (n143)
                   (n144)
                   (n145)
                   (n146)
                   (n147)
                   (n148)
                   (n149)
                   (n150)
                   (n151)
                   (n152)
                   (n153)
                   (n154)
                   (n155)
                   (n156)
                   (n157)
                   (n158)
                   (n159)
                   (n160)
                   (n161)
                   (n162)
                   (n163)
                   (n164)
                   (n165)
                   (n166)
                   (n167)
                   (n168)
                   (n169)
                   (n170)
                   (n171)
                   (n172)
                   (n173)
                   (n174)
                   (n175)
                   (n176)
                   (n177)
                   (n178)
                   (n179)
                   (n180)
                   (n181)
                   (n182)
                   (n183)
                   (n184)
                   (n185)
                   (n186)
                   (n187)
                   (n188)
                   (n189)
                   (n190)
                   (n191)
                   (n192)
                   (n193)
                   (n194)
                   (n195)
                   (n196)
                   (n197)
                   (n198)
                   (n199)
                   (n200)
                   (n201)
                   (n202)
                   (n203)
                   (n204)
                   (n205)
                   (n206)
                   (n207)
                   (n208)
                   (n209)
                   (n210)
                   (n211)
                   (n212)
                   (n213)
                   (n214)
                   (n215)
                   (n216)
                   (n217)
                   (n218)
                   (n219)
                   (n220)
                   (n221)
                   (n222)
                   (n223)
                   (n224)
                   (n225)
                   (n226)
                   (n227)
                   (n228)
                   (n229)
                   (n230)
                   (n231)
                   (n232)
                   (n233)
                   (n234)
                   (n235)
                   (n236)
                   (n237)
                   (n238)
                   (n239)
                   (n240)
                   (n241)
                   (n242)
                   (n243)
                   (n244)
                   (n245)
                   (n246)
                   (n247)
                   (n248)
                   (n249)
                   (n250)
                   (n251)
                   (n252)
                   (n253)
                   (n254)
                   (n255)
                   (n256)
                   (n257)
                   (n258)
                   (n259)
                   (n260)
                   (n261)
                   (n262)
                   (n263)
                   (n264)
                   (n265)
                   (n266)
                   (n267)
                   (n268)
                   (n269)
                   (n270)
                   (n271)
                   (n272)
                   (n273)
                   (n274)
                   (n275)
                   (n276)
                   (n277)
                   (n278)
                   (n279)
                   (n280)
                   (n281)
                   (n282)
                   (n283)
                   (n284)
                   (n285)
                   (n286)
                   (n287)
                   (n288)
                   (n289)
                   (n290)
                   (n291)
                   (n292)
                   (n293)
                   (n294)
                   (n295)
                   (n296)
                   (n297)
                   (n298)
                   (n299)
                   (n300))))
        (obs163lvp06p9m10bwjy ,#())
        (wgq4fdim7f2kx3zj610r
          ,'(let ()
              (lambda (actions)
                (define (parselynn:lr-shift-action:target-id x)
                  x)
                (define (parselynn:token:category x)
                  (vector-ref x 1))
                (define (parselynn:token:source x)
                  (vector-ref x 2))
                (define (parselynn:token:value x)
                  (vector-ref x 3))
                (define parselynn:end-of-input '*eoi*)
                (define-syntax iterator:next
                  (syntax-rules () ((_ iter default) (iter))))
                (define initial-state 0)
                (define (parselynn:lr-reject-action:make) #f)
                (define (parselynn:lr-reject-action? obj)
                  (equal? reject obj))
                (define reject (parselynn:lr-reject-action:make))
                (lambda (___scanner ___errorp)
                  (define get-next-token
                    (let () (lambda args (___scanner))))
                  (define input-tokens-iterator get-next-token)
                  (define error-procedure ___errorp)
                  (define parse-stack (stack-make))
                  (define state-stack (stack-make))
                  (define (do-reject token)
                    (if (equal? token parselynn:end-of-input)
                      (error-procedure
                        'end-of-input
                        "Syntax error: unexpected end of input: ~s"
                        token)
                      (error-procedure
                        'unexpected-token
                        "Syntax error: unexpected token: ~s"
                        token))
                    reject)
                  (define (process-accept)
                    (stack-peek parse-stack))
                  (define (loop-with-input
                           state
                           token
                           category
                           source
                           value)
                    (define (process-shift action)
                      (stack-push! state-stack state)
                      (stack-push! parse-stack value)
                      (loop (parselynn:lr-shift-action:target-id action)))
                    (begin
                      (define (process-goto lhs)
                        (define togo-state (stack-peek state-stack))
                        (case togo-state
                          ((0)
                           (case lhs
                             ((term)
                              (loop-with-input
                                301
                                token
                                category
                                source
                                value))
                             ((expr)
                              (loop-with-input
                                309
                                token
                                category
                                source
                                value))
                             (else (do-reject token))))
                          ((1) (case lhs (else (do-reject token))))
                          ((2) (case lhs (else (do-reject token))))
                          ((3) (case lhs (else (do-reject token))))
                          ((4) (case lhs (else (do-reject token))))
                          ((5) (case lhs (else (do-reject token))))
                          ((6) (case lhs (else (do-reject token))))
                          ((7) (case lhs (else (do-reject token))))
                          ((8) (case lhs (else (do-reject token))))
                          ((9) (case lhs (else (do-reject token))))
                          ((10) (case lhs (else (do-reject token))))
                          ((11) (case lhs (else (do-reject token))))
                          ((12) (case lhs (else (do-reject token))))
                          ((13) (case lhs (else (do-reject token))))
                          ((14) (case lhs (else (do-reject token))))
                          ((15) (case lhs (else (do-reject token))))
                          ((16) (case lhs (else (do-reject token))))
                          ((17) (case lhs (else (do-reject token))))
                          ((18) (case lhs (else (do-reject token))))
                          ((19) (case lhs (else (do-reject token))))
                          ((20) (case lhs (else (do-reject token))))
                          ((21) (case lhs (else (do-reject token))))
                          ((22) (case lhs (else (do-reject token))))
                          ((23) (case lhs (else (do-reject token))))
                          ((24) (case lhs (else (do-reject token))))
                          ((25) (case lhs (else (do-reject token))))
                          ((26) (case lhs (else (do-reject token))))
                          ((27) (case lhs (else (do-reject token))))
                          ((28) (case lhs (else (do-reject token))))
                          ((29) (case lhs (else (do-reject token))))
                          ((30) (case lhs (else (do-reject token))))
                          ((31) (case lhs (else (do-reject token))))
                          ((32) (case lhs (else (do-reject token))))
                          ((33) (case lhs (else (do-reject token))))
                          ((34) (case lhs (else (do-reject token))))
                          ((35) (case lhs (else (do-reject token))))
                          ((36) (case lhs (else (do-reject token))))
                          ((37) (case lhs (else (do-reject token))))
                          ((38) (case lhs (else (do-reject token))))
                          ((39) (case lhs (else (do-reject token))))
                          ((40) (case lhs (else (do-reject token))))
                          ((41) (case lhs (else (do-reject token))))
                          ((42) (case lhs (else (do-reject token))))
                          ((43) (case lhs (else (do-reject token))))
                          ((44) (case lhs (else (do-reject token))))
                          ((45) (case lhs (else (do-reject token))))
                          ((46) (case lhs (else (do-reject token))))
                          ((47) (case lhs (else (do-reject token))))
                          ((48) (case lhs (else (do-reject token))))
                          ((49) (case lhs (else (do-reject token))))
                          ((50) (case lhs (else (do-reject token))))
                          ((51) (case lhs (else (do-reject token))))
                          ((52) (case lhs (else (do-reject token))))
                          ((53) (case lhs (else (do-reject token))))
                          ((54) (case lhs (else (do-reject token))))
                          ((55) (case lhs (else (do-reject token))))
                          ((56) (case lhs (else (do-reject token))))
                          ((57) (case lhs (else (do-reject token))))
                          ((58) (case lhs (else (do-reject token))))
                          ((59) (case lhs (else (do-reject token))))
                          ((60) (case lhs (else (do-reject token))))
                          ((61) (case lhs (else (do-reject token))))
                          ((62) (case lhs (else (do-reject token))))
                          ((63) (case lhs (else (do-reject token))))
                          ((64) (case lhs (else (do-reject token))))
                          ((65) (case lhs (else (do-reject token))))
                          ((66) (case lhs (else (do-reject token))))
                          ((67) (case lhs (else (do-reject token))))
                          ((68) (case lhs (else (do-reject token))))
                          ((69) (case lhs (else (do-reject token))))
                          ((70) (case lhs (else (do-reject token))))
                          ((71) (case lhs (else (do-reject token))))
                          ((72) (case lhs (else (do-reject token))))
                          ((73) (case lhs (else (do-reject token))))
                          ((74) (case lhs (else (do-reject token))))
                          ((75) (case lhs (else (do-reject token))))
                          ((76) (case lhs (else (do-reject token))))
                          ((77) (case lhs (else (do-reject token))))
                          ((78) (case lhs (else (do-reject token))))
                          ((79) (case lhs (else (do-reject token))))
                          ((80) (case lhs (else (do-reject token))))
                          ((81) (case lhs (else (do-reject token))))
                          ((82) (case lhs (else (do-reject token))))
                          ((83) (case lhs (else (do-reject token))))
                          ((84) (case lhs (else (do-reject token))))
                          ((85) (case lhs (else (do-reject token))))
                          ((86) (case lhs (else (do-reject token))))
                          ((87) (case lhs (else (do-reject token))))
                          ((88) (case lhs (else (do-reject token))))
                          ((89) (case lhs (else (do-reject token))))
                          ((90) (case lhs (else (do-reject token))))
                          ((91) (case lhs (else (do-reject token))))
                          ((92) (case lhs (else (do-reject token))))
                          ((93) (case lhs (else (do-reject token))))
                          ((94) (case lhs (else (do-reject token))))
                          ((95) (case lhs (else (do-reject token))))
                          ((96) (case lhs (else (do-reject token))))
                          ((97) (case lhs (else (do-reject token))))
                          ((98) (case lhs (else (do-reject token))))
                          ((99) (case lhs (else (do-reject token))))
                          ((100) (case lhs (else (do-reject token))))
                          ((101) (case lhs (else (do-reject token))))
                          ((102) (case lhs (else (do-reject token))))
                          ((103) (case lhs (else (do-reject token))))
                          ((104) (case lhs (else (do-reject token))))
                          ((105) (case lhs (else (do-reject token))))
                          ((106) (case lhs (else (do-reject token))))
                          ((107) (case lhs (else (do-reject token))))
                          ((108) (case lhs (else (do-reject token))))
                          ((109) (case lhs (else (do-reject token))))
                          ((110) (case lhs (else (do-reject token))))
                          ((111) (case lhs (else (do-reject token))))
                          ((112) (case lhs (else (do-reject token))))
                          ((113) (case lhs (else (do-reject token))))
                          ((114) (case lhs (else (do-reject token))))
                          ((115) (case lhs (else (do-reject token))))
                          ((116) (case lhs (else (do-reject token))))
                          ((117) (case lhs (else (do-reject token))))
                          ((118) (case lhs (else (do-reject token))))
                          ((119) (case lhs (else (do-reject token))))
                          ((120) (case lhs (else (do-reject token))))
                          ((121) (case lhs (else (do-reject token))))
                          ((122) (case lhs (else (do-reject token))))
                          ((123) (case lhs (else (do-reject token))))
                          ((124) (case lhs (else (do-reject token))))
                          ((125) (case lhs (else (do-reject token))))
                          ((126) (case lhs (else (do-reject token))))
                          ((127) (case lhs (else (do-reject token))))
                          ((128) (case lhs (else (do-reject token))))
                          ((129) (case lhs (else (do-reject token))))
                          ((130) (case lhs (else (do-reject token))))
                          ((131) (case lhs (else (do-reject token))))
                          ((132) (case lhs (else (do-reject token))))
                          ((133) (case lhs (else (do-reject token))))
                          ((134) (case lhs (else (do-reject token))))
                          ((135) (case lhs (else (do-reject token))))
                          ((136) (case lhs (else (do-reject token))))
                          ((137) (case lhs (else (do-reject token))))
                          ((138) (case lhs (else (do-reject token))))
                          ((139) (case lhs (else (do-reject token))))
                          ((140) (case lhs (else (do-reject token))))
                          ((141) (case lhs (else (do-reject token))))
                          ((142) (case lhs (else (do-reject token))))
                          ((143) (case lhs (else (do-reject token))))
                          ((144) (case lhs (else (do-reject token))))
                          ((145) (case lhs (else (do-reject token))))
                          ((146) (case lhs (else (do-reject token))))
                          ((147) (case lhs (else (do-reject token))))
                          ((148) (case lhs (else (do-reject token))))
                          ((149) (case lhs (else (do-reject token))))
                          ((150) (case lhs (else (do-reject token))))
                          ((151) (case lhs (else (do-reject token))))
                          ((152) (case lhs (else (do-reject token))))
                          ((153) (case lhs (else (do-reject token))))
                          ((154) (case lhs (else (do-reject token))))
                          ((155) (case lhs (else (do-reject token))))
                          ((156) (case lhs (else (do-reject token))))
                          ((157) (case lhs (else (do-reject token))))
                          ((158) (case lhs (else (do-reject token))))
                          ((159) (case lhs (else (do-reject token))))
                          ((160) (case lhs (else (do-reject token))))
                          ((161) (case lhs (else (do-reject token))))
                          ((162) (case lhs (else (do-reject token))))
                          ((163) (case lhs (else (do-reject token))))
                          ((164) (case lhs (else (do-reject token))))
                          ((165) (case lhs (else (do-reject token))))
                          ((166) (case lhs (else (do-reject token))))
                          ((167) (case lhs (else (do-reject token))))
                          ((168) (case lhs (else (do-reject token))))
                          ((169) (case lhs (else (do-reject token))))
                          ((170) (case lhs (else (do-reject token))))
                          ((171) (case lhs (else (do-reject token))))
                          ((172) (case lhs (else (do-reject token))))
                          ((173) (case lhs (else (do-reject token))))
                          ((174) (case lhs (else (do-reject token))))
                          ((175) (case lhs (else (do-reject token))))
                          ((176) (case lhs (else (do-reject token))))
                          ((177) (case lhs (else (do-reject token))))
                          ((178) (case lhs (else (do-reject token))))
                          ((179) (case lhs (else (do-reject token))))
                          ((180) (case lhs (else (do-reject token))))
                          ((181) (case lhs (else (do-reject token))))
                          ((182) (case lhs (else (do-reject token))))
                          ((183) (case lhs (else (do-reject token))))
                          ((184) (case lhs (else (do-reject token))))
                          ((185) (case lhs (else (do-reject token))))
                          ((186) (case lhs (else (do-reject token))))
                          ((187) (case lhs (else (do-reject token))))
                          ((188) (case lhs (else (do-reject token))))
                          ((189) (case lhs (else (do-reject token))))
                          ((190) (case lhs (else (do-reject token))))
                          ((191) (case lhs (else (do-reject token))))
                          ((192) (case lhs (else (do-reject token))))
                          ((193) (case lhs (else (do-reject token))))
                          ((194) (case lhs (else (do-reject token))))
                          ((195) (case lhs (else (do-reject token))))
                          ((196) (case lhs (else (do-reject token))))
                          ((197) (case lhs (else (do-reject token))))
                          ((198) (case lhs (else (do-reject token))))
                          ((199) (case lhs (else (do-reject token))))
                          ((200) (case lhs (else (do-reject token))))
                          ((201) (case lhs (else (do-reject token))))
                          ((202) (case lhs (else (do-reject token))))
                          ((203) (case lhs (else (do-reject token))))
                          ((204) (case lhs (else (do-reject token))))
                          ((205) (case lhs (else (do-reject token))))
                          ((206) (case lhs (else (do-reject token))))
                          ((207) (case lhs (else (do-reject token))))
                          ((208) (case lhs (else (do-reject token))))
                          ((209) (case lhs (else (do-reject token))))
                          ((210) (case lhs (else (do-reject token))))
                          ((211) (case lhs (else (do-reject token))))
                          ((212) (case lhs (else (do-reject token))))
                          ((213) (case lhs (else (do-reject token))))
                          ((214) (case lhs (else (do-reject token))))
                          ((215) (case lhs (else (do-reject token))))
                          ((216) (case lhs (else (do-reject token))))
                          ((217) (case lhs (else (do-reject token))))
                          ((218) (case lhs (else (do-reject token))))
                          ((219) (case lhs (else (do-reject token))))
                          ((220) (case lhs (else (do-reject token))))
                          ((221) (case lhs (else (do-reject token))))
                          ((222) (case lhs (else (do-reject token))))
                          ((223) (case lhs (else (do-reject token))))
                          ((224) (case lhs (else (do-reject token))))
                          ((225) (case lhs (else (do-reject token))))
                          ((226) (case lhs (else (do-reject token))))
                          ((227) (case lhs (else (do-reject token))))
                          ((228) (case lhs (else (do-reject token))))
                          ((229) (case lhs (else (do-reject token))))
                          ((230) (case lhs (else (do-reject token))))
                          ((231) (case lhs (else (do-reject token))))
                          ((232) (case lhs (else (do-reject token))))
                          ((233) (case lhs (else (do-reject token))))
                          ((234) (case lhs (else (do-reject token))))
                          ((235) (case lhs (else (do-reject token))))
                          ((236) (case lhs (else (do-reject token))))
                          ((237) (case lhs (else (do-reject token))))
                          ((238) (case lhs (else (do-reject token))))
                          ((239) (case lhs (else (do-reject token))))
                          ((240) (case lhs (else (do-reject token))))
                          ((241) (case lhs (else (do-reject token))))
                          ((242) (case lhs (else (do-reject token))))
                          ((243) (case lhs (else (do-reject token))))
                          ((244) (case lhs (else (do-reject token))))
                          ((245) (case lhs (else (do-reject token))))
                          ((246) (case lhs (else (do-reject token))))
                          ((247) (case lhs (else (do-reject token))))
                          ((248) (case lhs (else (do-reject token))))
                          ((249) (case lhs (else (do-reject token))))
                          ((250) (case lhs (else (do-reject token))))
                          ((251) (case lhs (else (do-reject token))))
                          ((252) (case lhs (else (do-reject token))))
                          ((253) (case lhs (else (do-reject token))))
                          ((254) (case lhs (else (do-reject token))))
                          ((255) (case lhs (else (do-reject token))))
                          ((256) (case lhs (else (do-reject token))))
                          ((257) (case lhs (else (do-reject token))))
                          ((258) (case lhs (else (do-reject token))))
                          ((259) (case lhs (else (do-reject token))))
                          ((260) (case lhs (else (do-reject token))))
                          ((261) (case lhs (else (do-reject token))))
                          ((262) (case lhs (else (do-reject token))))
                          ((263) (case lhs (else (do-reject token))))
                          ((264) (case lhs (else (do-reject token))))
                          ((265) (case lhs (else (do-reject token))))
                          ((266) (case lhs (else (do-reject token))))
                          ((267) (case lhs (else (do-reject token))))
                          ((268) (case lhs (else (do-reject token))))
                          ((269) (case lhs (else (do-reject token))))
                          ((270) (case lhs (else (do-reject token))))
                          ((271) (case lhs (else (do-reject token))))
                          ((272) (case lhs (else (do-reject token))))
                          ((273) (case lhs (else (do-reject token))))
                          ((274) (case lhs (else (do-reject token))))
                          ((275) (case lhs (else (do-reject token))))
                          ((276) (case lhs (else (do-reject token))))
                          ((277) (case lhs (else (do-reject token))))
                          ((278) (case lhs (else (do-reject token))))
                          ((279) (case lhs (else (do-reject token))))
                          ((280) (case lhs (else (do-reject token))))
                          ((281) (case lhs (else (do-reject token))))
                          ((282) (case lhs (else (do-reject token))))
                          ((283) (case lhs (else (do-reject token))))
                          ((284) (case lhs (else (do-reject token))))
                          ((285) (case lhs (else (do-reject token))))
                          ((286) (case lhs (else (do-reject token))))
                          ((287) (case lhs (else (do-reject token))))
                          ((288) (case lhs (else (do-reject token))))
                          ((289) (case lhs (else (do-reject token))))
                          ((290) (case lhs (else (do-reject token))))
                          ((291) (case lhs (else (do-reject token))))
                          ((292) (case lhs (else (do-reject token))))
                          ((293) (case lhs (else (do-reject token))))
                          ((294) (case lhs (else (do-reject token))))
                          ((295) (case lhs (else (do-reject token))))
                          ((296) (case lhs (else (do-reject token))))
                          ((297) (case lhs (else (do-reject token))))
                          ((298) (case lhs (else (do-reject token))))
                          ((299) (case lhs (else (do-reject token))))
                          ((300) (case lhs (else (do-reject token))))
                          ((301)
                           (case lhs
                             ((op)
                              (loop-with-input
                                307
                                token
                                category
                                source
                                value))
                             (else (do-reject token))))
                          ((302) (case lhs (else (do-reject token))))
                          ((303) (case lhs (else (do-reject token))))
                          ((304) (case lhs (else (do-reject token))))
                          ((305) (case lhs (else (do-reject token))))
                          ((306) (case lhs (else (do-reject token))))
                          ((307)
                           (case lhs
                             ((term)
                              (loop-with-input
                                301
                                token
                                category
                                source
                                value))
                             ((expr)
                              (loop-with-input
                                308
                                token
                                category
                                source
                                value))
                             (else (do-reject token))))
                          ((308) (case lhs (else (do-reject token))))
                          ((309) (case lhs (else (do-reject token))))
                          (else (do-reject token))))
                      (case state
                        ((0)
                         (case category
                           ((n99) (process-shift 300))
                           ((n98) (process-shift 299))
                           ((n97) (process-shift 298))
                           ((n96) (process-shift 297))
                           ((n95) (process-shift 296))
                           ((n94) (process-shift 295))
                           ((n93) (process-shift 294))
                           ((n92) (process-shift 293))
                           ((n91) (process-shift 292))
                           ((n90) (process-shift 291))
                           ((n9) (process-shift 290))
                           ((n89) (process-shift 289))
                           ((n88) (process-shift 288))
                           ((n87) (process-shift 287))
                           ((n86) (process-shift 286))
                           ((n85) (process-shift 285))
                           ((n84) (process-shift 284))
                           ((n83) (process-shift 283))
                           ((n82) (process-shift 282))
                           ((n81) (process-shift 281))
                           ((n80) (process-shift 280))
                           ((n8) (process-shift 279))
                           ((n79) (process-shift 278))
                           ((n78) (process-shift 277))
                           ((n77) (process-shift 276))
                           ((n76) (process-shift 275))
                           ((n75) (process-shift 274))
                           ((n74) (process-shift 273))
                           ((n73) (process-shift 272))
                           ((n72) (process-shift 271))
                           ((n71) (process-shift 270))
                           ((n70) (process-shift 269))
                           ((n7) (process-shift 268))
                           ((n69) (process-shift 267))
                           ((n68) (process-shift 266))
                           ((n67) (process-shift 265))
                           ((n66) (process-shift 264))
                           ((n65) (process-shift 263))
                           ((n64) (process-shift 262))
                           ((n63) (process-shift 261))
                           ((n62) (process-shift 260))
                           ((n61) (process-shift 259))
                           ((n60) (process-shift 258))
                           ((n6) (process-shift 257))
                           ((n59) (process-shift 256))
                           ((n58) (process-shift 255))
                           ((n57) (process-shift 254))
                           ((n56) (process-shift 253))
                           ((n55) (process-shift 252))
                           ((n54) (process-shift 251))
                           ((n53) (process-shift 250))
                           ((n52) (process-shift 249))
                           ((n51) (process-shift 248))
                           ((n50) (process-shift 247))
                           ((n5) (process-shift 246))
                           ((n49) (process-shift 245))
                           ((n48) (process-shift 244))
                           ((n47) (process-shift 243))
                           ((n46) (process-shift 242))
                           ((n45) (process-shift 241))
                           ((n44) (process-shift 240))
                           ((n43) (process-shift 239))
                           ((n42) (process-shift 238))
                           ((n41) (process-shift 237))
                           ((n40) (process-shift 236))
                           ((n4) (process-shift 235))
                           ((n39) (process-shift 234))
                           ((n38) (process-shift 233))
                           ((n37) (process-shift 232))
                           ((n36) (process-shift 231))
                           ((n35) (process-shift 230))
                           ((n34) (process-shift 229))
                           ((n33) (process-shift 228))
                           ((n32) (process-shift 227))
                           ((n31) (process-shift 226))
                           ((n300) (process-shift 225))
                           ((n30) (process-shift 224))
                           ((n3) (process-shift 223))
                           ((n299) (process-shift 222))
                           ((n298) (process-shift 221))
                           ((n297) (process-shift 220))
                           ((n296) (process-shift 219))
                           ((n295) (process-shift 218))
                           ((n294) (process-shift 217))
                           ((n293) (process-shift 216))
                           ((n292) (process-shift 215))
                           ((n291) (process-shift 214))
                           ((n290) (process-shift 213))
                           ((n29) (process-shift 212))
                           ((n289) (process-shift 211))
                           ((n288) (process-shift 210))
                           ((n287) (process-shift 209))
                           ((n286) (process-shift 208))
                           ((n285) (process-shift 207))
                           ((n284) (process-shift 206))
                           ((n283) (process-shift 205))
                           ((n282) (process-shift 204))
                           ((n281) (process-shift 203))
                           ((n280) (process-shift 202))
                           ((n28) (process-shift 201))
                           ((n279) (process-shift 200))
                           ((n278) (process-shift 199))
                           ((n277) (process-shift 198))
                           ((n276) (process-shift 197))
                           ((n275) (process-shift 196))
                           ((n274) (process-shift 195))
                           ((n273) (process-shift 194))
                           ((n272) (process-shift 193))
                           ((n271) (process-shift 192))
                           ((n270) (process-shift 191))
                           ((n27) (process-shift 190))
                           ((n269) (process-shift 189))
                           ((n268) (process-shift 188))
                           ((n267) (process-shift 187))
                           ((n266) (process-shift 186))
                           ((n265) (process-shift 185))
                           ((n264) (process-shift 184))
                           ((n263) (process-shift 183))
                           ((n262) (process-shift 182))
                           ((n261) (process-shift 181))
                           ((n260) (process-shift 180))
                           ((n26) (process-shift 179))
                           ((n259) (process-shift 178))
                           ((n258) (process-shift 177))
                           ((n257) (process-shift 176))
                           ((n256) (process-shift 175))
                           ((n255) (process-shift 174))
                           ((n254) (process-shift 173))
                           ((n253) (process-shift 172))
                           ((n252) (process-shift 171))
                           ((n251) (process-shift 170))
                           ((n250) (process-shift 169))
                           ((n25) (process-shift 168))
                           ((n249) (process-shift 167))
                           ((n248) (process-shift 166))
                           ((n247) (process-shift 165))
                           ((n246) (process-shift 164))
                           ((n245) (process-shift 163))
                           ((n244) (process-shift 162))
                           ((n243) (process-shift 161))
                           ((n242) (process-shift 160))
                           ((n241) (process-shift 159))
                           ((n240) (process-shift 158))
                           ((n24) (process-shift 157))
                           ((n239) (process-shift 156))
                           ((n238) (process-shift 155))
                           ((n237) (process-shift 154))
                           ((n236) (process-shift 153))
                           ((n235) (process-shift 152))
                           ((n234) (process-shift 151))
                           ((n233) (process-shift 150))
                           ((n232) (process-shift 149))
                           ((n231) (process-shift 148))
                           ((n230) (process-shift 147))
                           ((n23) (process-shift 146))
                           ((n229) (process-shift 145))
                           ((n228) (process-shift 144))
                           ((n227) (process-shift 143))
                           ((n226) (process-shift 142))
                           ((n225) (process-shift 141))
                           ((n224) (process-shift 140))
                           ((n223) (process-shift 139))
                           ((n222) (process-shift 138))
                           ((n221) (process-shift 137))
                           ((n220) (process-shift 136))
                           ((n22) (process-shift 135))
                           ((n219) (process-shift 134))
                           ((n218) (process-shift 133))
                           ((n217) (process-shift 132))
                           ((n216) (process-shift 131))
                           ((n215) (process-shift 130))
                           ((n214) (process-shift 129))
                           ((n213) (process-shift 128))
                           ((n212) (process-shift 127))
                           ((n211) (process-shift 126))
                           ((n210) (process-shift 125))
                           ((n21) (process-shift 124))
                           ((n209) (process-shift 123))
                           ((n208) (process-shift 122))
                           ((n207) (process-shift 121))
                           ((n206) (process-shift 120))
                           ((n205) (process-shift 119))
                           ((n204) (process-shift 118))
                           ((n203) (process-shift 117))
                           ((n202) (process-shift 116))
                           ((n201) (process-shift 115))
                           ((n200) (process-shift 114))
                           ((n20) (process-shift 113))
                           ((n2) (process-shift 112))
                           ((n199) (process-shift 111))
                           ((n198) (process-shift 110))
                           ((n197) (process-shift 109))
                           ((n196) (process-shift 108))
                           ((n195) (process-shift 107))
                           ((n194) (process-shift 106))
                           ((n193) (process-shift 105))
                           ((n192) (process-shift 104))
                           ((n191) (process-shift 103))
                           ((n190) (process-shift 102))
                           ((n19) (process-shift 101))
                           ((n189) (process-shift 100))
                           ((n188) (process-shift 99))
                           ((n187) (process-shift 98))
                           ((n186) (process-shift 97))
                           ((n185) (process-shift 96))
                           ((n184) (process-shift 95))
                           ((n183) (process-shift 94))
                           ((n182) (process-shift 93))
                           ((n181) (process-shift 92))
                           ((n180) (process-shift 91))
                           ((n18) (process-shift 90))
                           ((n179) (process-shift 89))
                           ((n178) (process-shift 88))
                           ((n177) (process-shift 87))
                           ((n176) (process-shift 86))
                           ((n175) (process-shift 85))
                           ((n174) (process-shift 84))
                           ((n173) (process-shift 83))
                           ((n172) (process-shift 82))
                           ((n171) (process-shift 81))
                           ((n170) (process-shift 80))
                           ((n17) (process-shift 79))
                           ((n169) (process-shift 78))
                           ((n168) (process-shift 77))
                           ((n167) (process-shift 76))
                           ((n166) (process-shift 75))
                           ((n165) (process-shift 74))
                           ((n164) (process-shift 73))
                           ((n163) (process-shift 72))
                           ((n162) (process-shift 71))
                           ((n161) (process-shift 70))
                           ((n160) (process-shift 69))
                           ((n16) (process-shift 68))
                           ((n159) (process-shift 67))
                           ((n158) (process-shift 66))
                           ((n157) (process-shift 65))
                           ((n156) (process-shift 64))
                           ((n155) (process-shift 63))
                           ((n154) (process-shift 62))
                           ((n153) (process-shift 61))
                           ((n152) (process-shift 60))
                           ((n151) (process-shift 59))
                           ((n150) (process-shift 58))
                           ((n15) (process-shift 57))
                           ((n149) (process-shift 56))
                           ((n148) (process-shift 55))
                           ((n147) (process-shift 54))
                           ((n146) (process-shift 53))
                           ((n145) (process-shift 52))
                           ((n144) (process-shift 51))
                           ((n143) (process-shift 50))
                           ((n142) (process-shift 49))
                           ((n141) (process-shift 48))
                           ((n140) (process-shift 47))
                           ((n14) (process-shift 46))
                           ((n139) (process-shift 45))
                           ((n138) (process-shift 44))
                           ((n137) (process-shift 43))
                           ((n136) (process-shift 42))
                           ((n135) (process-shift 41))
                           ((n134) (process-shift 40))
                           ((n133) (process-shift 39))
                           ((n132) (process-shift 38))
                           ((n131) (process-shift 37))
                           ((n130) (process-shift 36))
                           ((n13) (process-shift 35))
                           ((n129) (process-shift 34))
                           ((n128) (process-shift 33))
                           ((n127) (process-shift 32))
                           ((n126) (process-shift 31))
                           ((n125) (process-shift 30))
                           ((n124) (process-shift 29))
                           ((n123) (process-shift 28))
                           ((n122) (process-shift 27))
                           ((n121) (process-shift 26))
                           ((n120) (process-shift 25))
                           ((n12) (process-shift 24))
                           ((n119) (process-shift 23))
                           ((n118) (process-shift 22))
                           ((n117) (process-shift 21))
                           ((n116) (process-shift 20))
                           ((n115) (process-shift 19))
                           ((n114) (process-shift 18))
                           ((n113) (process-shift 17))
                           ((n112) (process-shift 16))
                           ((n111) (process-shift 15))
                           ((n110) (process-shift 14))
                           ((n11) (process-shift 13))
                           ((n109) (process-shift 12))
                           ((n108) (process-shift 11))
                           ((n107) (process-shift 10))
                           ((n106) (process-shift 9))
                           ((n105) (process-shift 8))
                           ((n104) (process-shift 7))
                           ((n103) (process-shift 6))
                           ((n102) (process-shift 5))
                           ((n101) (process-shift 4))
                           ((n100) (process-shift 3))
                           ((n10) (process-shift 2))
                           ((n1) (process-shift 1))
                           (else (do-reject token))))
                        ((1)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((2)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((3)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((4)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((5)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((6)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((7)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((8)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((9)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((10)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((11)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((12)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((13)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((14)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((15)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((16)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((17)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((18)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((19)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((20)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((21)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((22)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((23)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((24)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((25)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((26)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((27)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((28)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((29)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((30)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((31)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((32)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((33)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((34)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((35)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((36)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((37)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((38)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((39)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((40)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((41)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((42)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((43)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((44)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((45)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((46)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((47)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((48)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((49)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((50)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((51)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((52)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((53)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((54)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((55)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((56)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((57)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((58)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((59)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((60)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((61)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((62)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((63)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((64)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((65)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((66)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((67)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((68)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((69)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((70)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((71)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((72)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((73)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((74)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((75)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((76)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((77)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((78)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((79)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((80)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((81)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((82)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((83)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((84)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((85)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((86)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((87)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((88)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((89)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((90)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((91)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((92)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((93)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((94)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((95)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((96)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((97)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((98)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((99)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((100)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((101)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((102)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((103)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((104)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((105)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((106)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((107)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((108)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((109)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((110)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((111)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((112)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((113)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((114)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((115)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((116)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((117)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((118)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((119)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((120)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((121)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((122)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((123)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((124)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((125)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((126)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((127)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((128)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((129)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((130)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((131)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((132)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((133)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((134)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((135)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((136)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((137)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((138)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((139)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((140)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((141)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((142)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((143)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((144)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((145)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((146)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((147)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((148)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((149)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((150)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((151)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((152)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((153)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((154)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((155)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((156)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((157)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((158)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((159)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((160)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((161)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((162)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((163)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((164)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((165)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((166)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((167)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((168)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((169)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((170)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((171)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((172)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((173)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((174)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((175)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((176)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((177)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((178)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((179)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((180)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((181)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((182)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((183)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((184)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((185)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((186)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((187)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((188)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((189)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((190)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((191)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((192)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((193)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((194)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((195)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((196)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((197)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((198)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((199)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((200)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((201)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((202)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((203)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((204)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((205)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((206)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((207)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((208)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((209)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((210)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((211)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((212)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((213)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((214)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((215)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((216)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((217)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((218)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((219)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((220)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((221)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((222)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((223)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((224)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((225)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((226)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((227)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((228)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((229)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((230)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((231)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((232)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((233)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((234)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((235)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((236)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((237)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((238)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((239)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((240)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((241)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((242)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((243)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((244)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((245)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((246)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((247)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((248)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((249)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((250)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((251)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((252)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((253)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((254)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((255)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((256)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((257)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((258)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((259)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((260)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((261)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((262)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((263)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((264)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((265)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((266)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((267)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((268)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((269)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((270)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((271)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((272)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((273)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((274)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((275)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((276)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((277)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((278)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((279)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((280)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((281)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((282)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((283)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((284)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((285)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((286)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((287)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((288)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((289)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((290)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((291)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((292)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((293)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((294)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((295)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((296)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((297)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((298)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((299)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((300)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((301)
                         (case category
                           ((^) (process-shift 306))
                           ((-) (process-shift 305))
                           ((+) (process-shift 304))
                           ((*) (process-shift 303))
                           ((%) (process-shift 302))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'expr)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'expr))
                           (else (do-reject token))))
                        ((302)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((303)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((304)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((305)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((306)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((307)
                         (case category
                           ((n99) (process-shift 300))
                           ((n98) (process-shift 299))
                           ((n97) (process-shift 298))
                           ((n96) (process-shift 297))
                           ((n95) (process-shift 296))
                           ((n94) (process-shift 295))
                           ((n93) (process-shift 294))
                           ((n92) (process-shift 293))
                           ((n91) (process-shift 292))
                           ((n90) (process-shift 291))
                           ((n9) (process-shift 290))
                           ((n89) (process-shift 289))
                           ((n88) (process-shift 288))
                           ((n87) (process-shift 287))
                           ((n86) (process-shift 286))
                           ((n85) (process-shift 285))
                           ((n84) (process-shift 284))
                           ((n83) (process-shift 283))
                           ((n82) (process-shift 282))
                           ((n81) (process-shift 281))
                           ((n80) (process-shift 280))
                           ((n8) (process-shift 279))
                           ((n79) (process-shift 278))
                           ((n78) (process-shift 277))
                           ((n77) (process-shift 276))
                           ((n76) (process-shift 275))
                           ((n75) (process-shift 274))
                           ((n74) (process-shift 273))
                           ((n73) (process-shift 272))
                           ((n72) (process-shift 271))
                           ((n71) (process-shift 270))
                           ((n70) (process-shift 269))
                           ((n7) (process-shift 268))
                           ((n69) (process-shift 267))
                           ((n68) (process-shift 266))
                           ((n67) (process-shift 265))
                           ((n66) (process-shift 264))
                           ((n65) (process-shift 263))
                           ((n64) (process-shift 262))
                           ((n63) (process-shift 261))
                           ((n62) (process-shift 260))
                           ((n61) (process-shift 259))
                           ((n60) (process-shift 258))
                           ((n6) (process-shift 257))
                           ((n59) (process-shift 256))
                           ((n58) (process-shift 255))
                           ((n57) (process-shift 254))
                           ((n56) (process-shift 253))
                           ((n55) (process-shift 252))
                           ((n54) (process-shift 251))
                           ((n53) (process-shift 250))
                           ((n52) (process-shift 249))
                           ((n51) (process-shift 248))
                           ((n50) (process-shift 247))
                           ((n5) (process-shift 246))
                           ((n49) (process-shift 245))
                           ((n48) (process-shift 244))
                           ((n47) (process-shift 243))
                           ((n46) (process-shift 242))
                           ((n45) (process-shift 241))
                           ((n44) (process-shift 240))
                           ((n43) (process-shift 239))
                           ((n42) (process-shift 238))
                           ((n41) (process-shift 237))
                           ((n40) (process-shift 236))
                           ((n4) (process-shift 235))
                           ((n39) (process-shift 234))
                           ((n38) (process-shift 233))
                           ((n37) (process-shift 232))
                           ((n36) (process-shift 231))
                           ((n35) (process-shift 230))
                           ((n34) (process-shift 229))
                           ((n33) (process-shift 228))
                           ((n32) (process-shift 227))
                           ((n31) (process-shift 226))
                           ((n300) (process-shift 225))
                           ((n30) (process-shift 224))
                           ((n3) (process-shift 223))
                           ((n299) (process-shift 222))
                           ((n298) (process-shift 221))
                           ((n297) (process-shift 220))
                           ((n296) (process-shift 219))
                           ((n295) (process-shift 218))
                           ((n294) (process-shift 217))
                           ((n293) (process-shift 216))
                           ((n292) (process-shift 215))
                           ((n291) (process-shift 214))
                           ((n290) (process-shift 213))
                           ((n29) (process-shift 212))
                           ((n289) (process-shift 211))
                           ((n288) (process-shift 210))
                           ((n287) (process-shift 209))
                           ((n286) (process-shift 208))
                           ((n285) (process-shift 207))
                           ((n284) (process-shift 206))
                           ((n283) (process-shift 205))
                           ((n282) (process-shift 204))
                           ((n281) (process-shift 203))
                           ((n280) (process-shift 202))
                           ((n28) (process-shift 201))
                           ((n279) (process-shift 200))
                           ((n278) (process-shift 199))
                           ((n277) (process-shift 198))
                           ((n276) (process-shift 197))
                           ((n275) (process-shift 196))
                           ((n274) (process-shift 195))
                           ((n273) (process-shift 194))
                           ((n272) (process-shift 193))
                           ((n271) (process-shift 192))
                           ((n270) (process-shift 191))
                           ((n27) (process-shift 190))
                           ((n269) (process-shift 189))
                           ((n268) (process-shift 188))
                           ((n267) (process-shift 187))
                           ((n266) (process-shift 186))
                           ((n265) (process-shift 185))
                           ((n264) (process-shift 184))
                           ((n263) (process-shift 183))
                           ((n262) (process-shift 182))
                           ((n261) (process-shift 181))
                           ((n260) (process-shift 180))
                           ((n26) (process-shift 179))
                           ((n259) (process-shift 178))
                           ((n258) (process-shift 177))
                           ((n257) (process-shift 176))
                           ((n256) (process-shift 175))
                           ((n255) (process-shift 174))
                           ((n254) (process-shift 173))
                           ((n253) (process-shift 172))
                           ((n252) (process-shift 171))
                           ((n251) (process-shift 170))
                           ((n250) (process-shift 169))
                           ((n25) (process-shift 168))
                           ((n249) (process-shift 167))
                           ((n248) (process-shift 166))
                           ((n247) (process-shift 165))
                           ((n246) (process-shift 164))
                           ((n245) (process-shift 163))
                           ((n244) (process-shift 162))
                           ((n243) (process-shift 161))
                           ((n242) (process-shift 160))
                           ((n241) (process-shift 159))
                           ((n240) (process-shift 158))
                           ((n24) (process-shift 157))
                           ((n239) (process-shift 156))
                           ((n238) (process-shift 155))
                           ((n237) (process-shift 154))
                           ((n236) (process-shift 153))
                           ((n235) (process-shift 152))
                           ((n234) (process-shift 151))
                           ((n233) (process-shift 150))
                           ((n232) (process-shift 149))
                           ((n231) (process-shift 148))
                           ((n230) (process-shift 147))
                           ((n23) (process-shift 146))
                           ((n229) (process-shift 145))
                           ((n228) (process-shift 144))
                           ((n227) (process-shift 143))
                           ((n226) (process-shift 142))
                           ((n225) (process-shift 141))
                           ((n224) (process-shift 140))
                           ((n223) (process-shift 139))
                           ((n222) (process-shift 138))
                           ((n221) (process-shift 137))
                           ((n220) (process-shift 136))
                           ((n22) (process-shift 135))
                           ((n219) (process-shift 134))
                           ((n218) (process-shift 133))
                           ((n217) (process-shift 132))
                           ((n216) (process-shift 131))
                           ((n215) (process-shift 130))
                           ((n214) (process-shift 129))
                           ((n213) (process-shift 128))
                           ((n212) (process-shift 127))
                           ((n211) (process-shift 126))
                           ((n210) (process-shift 125))
                           ((n21) (process-shift 124))
                           ((n209) (process-shift 123))
                           ((n208) (process-shift 122))
                           ((n207) (process-shift 121))
                           ((n206) (process-shift 120))
                           ((n205) (process-shift 119))
                           ((n204) (process-shift 118))
                           ((n203) (process-shift 117))
                           ((n202) (process-shift 116))
                           ((n201) (process-shift 115))
                           ((n200) (process-shift 114))
                           ((n20) (process-shift 113))
                           ((n2) (process-shift 112))
                           ((n199) (process-shift 111))
                           ((n198) (process-shift 110))
                           ((n197) (process-shift 109))
                           ((n196) (process-shift 108))
                           ((n195) (process-shift 107))
                           ((n194) (process-shift 106))
                           ((n193) (process-shift 105))
                           ((n192) (process-shift 104))
                           ((n191) (process-shift 103))
                           ((n190) (process-shift 102))
                           ((n19) (process-shift 101))
                           ((n189) (process-shift 100))
                           ((n188) (process-shift 99))
                           ((n187) (process-shift 98))
                           ((n186) (process-shift 97))
                           ((n185) (process-shift 96))
                           ((n184) (process-shift 95))
                           ((n183) (process-shift 94))
                           ((n182) (process-shift 93))
                           ((n181) (process-shift 92))
                           ((n180) (process-shift 91))
                           ((n18) (process-shift 90))
                           ((n179) (process-shift 89))
                           ((n178) (process-shift 88))
                           ((n177) (process-shift 87))
                           ((n176) (process-shift 86))
                           ((n175) (process-shift 85))
                           ((n174) (process-shift 84))
                           ((n173) (process-shift 83))
                           ((n172) (process-shift 82))
                           ((n171) (process-shift 81))
                           ((n170) (process-shift 80))
                           ((n17) (process-shift 79))
                           ((n169) (process-shift 78))
                           ((n168) (process-shift 77))
                           ((n167) (process-shift 76))
                           ((n166) (process-shift 75))
                           ((n165) (process-shift 74))
                           ((n164) (process-shift 73))
                           ((n163) (process-shift 72))
                           ((n162) (process-shift 71))
                           ((n161) (process-shift 70))
                           ((n160) (process-shift 69))
                           ((n16) (process-shift 68))
                           ((n159) (process-shift 67))
                           ((n158) (process-shift 66))
                           ((n157) (process-shift 65))
                           ((n156) (process-shift 64))
                           ((n155) (process-shift 63))
                           ((n154) (process-shift 62))
                           ((n153) (process-shift 61))
                           ((n152) (process-shift 60))
                           ((n151) (process-shift 59))
                           ((n150) (process-shift 58))
                           ((n15) (process-shift 57))
                           ((n149) (process-shift 56))
                           ((n148) (process-shift 55))
                           ((n147) (process-shift 54))
                           ((n146) (process-shift 53))
                           ((n145) (process-shift 52))
                           ((n144) (process-shift 51))
                           ((n143) (process-shift 50))
                           ((n142) (process-shift 49))
                           ((n141) (process-shift 48))
                           ((n140) (process-shift 47))
                           ((n14) (process-shift 46))
                           ((n139) (process-shift 45))
                           ((n138) (process-shift 44))
                           ((n137) (process-shift 43))
                           ((n136) (process-shift 42))
                           ((n135) (process-shift 41))
                           ((n134) (process-shift 40))
                           ((n133) (process-shift 39))
                           ((n132) (process-shift 38))
                           ((n131) (process-shift 37))
                           ((n130) (process-shift 36))
                           ((n13) (process-shift 35))
                           ((n129) (process-shift 34))
                           ((n128) (process-shift 33))
                           ((n127) (process-shift 32))
                           ((n126) (process-shift 31))
                           ((n125) (process-shift 30))
                           ((n124) (process-shift 29))
                           ((n123) (process-shift 28))
                           ((n122) (process-shift 27))
                           ((n121) (process-shift 26))
                           ((n120) (process-shift 25))
                           ((n12) (process-shift 24))
                           ((n119) (process-shift 23))
                           ((n118) (process-shift 22))
                           ((n117) (process-shift 21))
                           ((n116) (process-shift 20))
                           ((n115) (process-shift 19))
                           ((n114) (process-shift 18))
                           ((n113) (process-shift 17))
                           ((n112) (process-shift 16))
                           ((n111) (process-shift 15))
                           ((n110) (process-shift 14))
                           ((n11) (process-shift 13))
                           ((n109) (process-shift 12))
                           ((n108) (process-shift 11))
                           ((n107) (process-shift 10))
                           ((n106) (process-shift 9))
                           ((n105) (process-shift 8))
                           ((n104) (process-shift 7))
                           ((n103) (process-shift 6))
                           ((n102) (process-shift 5))
                           ((n101) (process-shift 4))
                           ((n100) (process-shift 3))
                           ((n10) (process-shift 2))
                           ((n1) (process-shift 1))
                           (else (do-reject token))))
                        ((308)
                         (case category
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'expr)
                                (define $3 (stack-pop! parse-stack))
                                (define $2 (stack-pop! parse-stack))
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1 $2 $3)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 3)
                            (process-goto 'expr))
                           (else (do-reject token))))
                        ((309)
                         (case category
                           ((*eoi*) (process-accept))
                           (else (do-reject token))))
                        (else (do-reject token)))))
                  (define (get-input)
                    (define token
                      (iterator:next
                        input-tokens-iterator
                        parselynn:end-of-input))
                    (if (equal? token parselynn:end-of-input)
                      (values token token token token)
                      (let ()
                        (define category
                          (parselynn:token:category token))
                        (define source (parselynn:token:source token))
                        (define value (parselynn:token:value token))
                        (values token category source value))))
                  (define (loop state)
                    (define-values
                      (token category source value)
                      (get-input))
                    (loop-with-input
                      state
                      token
                      category
                      source
                      value))
                  (loop initial-state)))))
        (i3bpqtlnzqjz8ileyrpt
          ,((let ()
              (lambda (actions)
                (define (parselynn:lr-shift-action:target-id x)
                  x)
                (define (parselynn:token:category x)
                  (vector-ref x 1))
                (define (parselynn:token:source x)
                  (vector-ref x 2))
                (define (parselynn:token:value x)
                  (vector-ref x 3))
                (define parselynn:end-of-input '*eoi*)
                (define-syntax iterator:next
                  (syntax-rules () ((_ iter default) (iter))))
                (define initial-state 0)
                (define (parselynn:lr-reject-action:make) #f)
                (define (parselynn:lr-reject-action? obj)
                  (equal? reject obj))
                (define reject (parselynn:lr-reject-action:make))
                (lambda (___scanner ___errorp)
                  (define get-next-token
                    (let () (lambda args (___scanner))))
                  (define input-tokens-iterator get-next-token)
                  (define error-procedure ___errorp)
                  (define parse-stack (stack-make))
                  (define state-stack (stack-make))
                  (define (do-reject token)
                    (if (equal? token parselynn:end-of-input)
                      (error-procedure
                        'end-of-input
                        "Syntax error: unexpected end of input: ~s"
                        token)
                      (error-procedure
                        'unexpected-token
                        "Syntax error: unexpected token: ~s"
                        token))
                    reject)
                  (define (process-accept)
                    (stack-peek parse-stack))
                  (define (loop-with-input
                           state
                           token
                           category
                           source
                           value)
                    (define (process-shift action)
                      (stack-push! state-stack state)
                      (stack-push! parse-stack value)
                      (loop (parselynn:lr-shift-action:target-id action)))
                    (begin
                      (define (process-goto lhs)
                        (define togo-state (stack-peek state-stack))
                        (case togo-state
                          ((0)
                           (case lhs
                             ((term)
                              (loop-with-input
                                301
                                token
                                category
                                source
                                value))
                             ((expr)
                              (loop-with-input
                                309
                                token
                                category
                                source
                                value))
                             (else (do-reject token))))
                          ((1) (case lhs (else (do-reject token))))
                          ((2) (case lhs (else (do-reject token))))
                          ((3) (case lhs (else (do-reject token))))
                          ((4) (case lhs (else (do-reject token))))
                          ((5) (case lhs (else (do-reject token))))
                          ((6) (case lhs (else (do-reject token))))
                          ((7) (case lhs (else (do-reject token))))
                          ((8) (case lhs (else (do-reject token))))
                          ((9) (case lhs (else (do-reject token))))
                          ((10) (case lhs (else (do-reject token))))
                          ((11) (case lhs (else (do-reject token))))
                          ((12) (case lhs (else (do-reject token))))
                          ((13) (case lhs (else (do-reject token))))
                          ((14) (case lhs (else (do-reject token))))
                          ((15) (case lhs (else (do-reject token))))
                          ((16) (case lhs (else (do-reject token))))
                          ((17) (case lhs (else (do-reject token))))
                          ((18) (case lhs (else (do-reject token))))
                          ((19) (case lhs (else (do-reject token))))
                          ((20) (case lhs (else (do-reject token))))
                          ((21) (case lhs (else (do-reject token))))
                          ((22) (case lhs (else (do-reject token))))
                          ((23) (case lhs (else (do-reject token))))
                          ((24) (case lhs (else (do-reject token))))
                          ((25) (case lhs (else (do-reject token))))
                          ((26) (case lhs (else (do-reject token))))
                          ((27) (case lhs (else (do-reject token))))
                          ((28) (case lhs (else (do-reject token))))
                          ((29) (case lhs (else (do-reject token))))
                          ((30) (case lhs (else (do-reject token))))
                          ((31) (case lhs (else (do-reject token))))
                          ((32) (case lhs (else (do-reject token))))
                          ((33) (case lhs (else (do-reject token))))
                          ((34) (case lhs (else (do-reject token))))
                          ((35) (case lhs (else (do-reject token))))
                          ((36) (case lhs (else (do-reject token))))
                          ((37) (case lhs (else (do-reject token))))
                          ((38) (case lhs (else (do-reject token))))
                          ((39) (case lhs (else (do-reject token))))
                          ((40) (case lhs (else (do-reject token))))
                          ((41) (case lhs (else (do-reject token))))
                          ((42) (case lhs (else (do-reject token))))
                          ((43) (case lhs (else (do-reject token))))
                          ((44) (case lhs (else (do-reject token))))
                          ((45) (case lhs (else (do-reject token))))
                          ((46) (case lhs (else (do-reject token))))
                          ((47) (case lhs (else (do-reject token))))
                          ((48) (case lhs (else (do-reject token))))
                          ((49) (case lhs (else (do-reject token))))
                          ((50) (case lhs (else (do-reject token))))
                          ((51) (case lhs (else (do-reject token))))
                          ((52) (case lhs (else (do-reject token))))
                          ((53) (case lhs (else (do-reject token))))
                          ((54) (case lhs (else (do-reject token))))
                          ((55) (case lhs (else (do-reject token))))
                          ((56) (case lhs (else (do-reject token))))
                          ((57) (case lhs (else (do-reject token))))
                          ((58) (case lhs (else (do-reject token))))
                          ((59) (case lhs (else (do-reject token))))
                          ((60) (case lhs (else (do-reject token))))
                          ((61) (case lhs (else (do-reject token))))
                          ((62) (case lhs (else (do-reject token))))
                          ((63) (case lhs (else (do-reject token))))
                          ((64) (case lhs (else (do-reject token))))
                          ((65) (case lhs (else (do-reject token))))
                          ((66) (case lhs (else (do-reject token))))
                          ((67) (case lhs (else (do-reject token))))
                          ((68) (case lhs (else (do-reject token))))
                          ((69) (case lhs (else (do-reject token))))
                          ((70) (case lhs (else (do-reject token))))
                          ((71) (case lhs (else (do-reject token))))
                          ((72) (case lhs (else (do-reject token))))
                          ((73) (case lhs (else (do-reject token))))
                          ((74) (case lhs (else (do-reject token))))
                          ((75) (case lhs (else (do-reject token))))
                          ((76) (case lhs (else (do-reject token))))
                          ((77) (case lhs (else (do-reject token))))
                          ((78) (case lhs (else (do-reject token))))
                          ((79) (case lhs (else (do-reject token))))
                          ((80) (case lhs (else (do-reject token))))
                          ((81) (case lhs (else (do-reject token))))
                          ((82) (case lhs (else (do-reject token))))
                          ((83) (case lhs (else (do-reject token))))
                          ((84) (case lhs (else (do-reject token))))
                          ((85) (case lhs (else (do-reject token))))
                          ((86) (case lhs (else (do-reject token))))
                          ((87) (case lhs (else (do-reject token))))
                          ((88) (case lhs (else (do-reject token))))
                          ((89) (case lhs (else (do-reject token))))
                          ((90) (case lhs (else (do-reject token))))
                          ((91) (case lhs (else (do-reject token))))
                          ((92) (case lhs (else (do-reject token))))
                          ((93) (case lhs (else (do-reject token))))
                          ((94) (case lhs (else (do-reject token))))
                          ((95) (case lhs (else (do-reject token))))
                          ((96) (case lhs (else (do-reject token))))
                          ((97) (case lhs (else (do-reject token))))
                          ((98) (case lhs (else (do-reject token))))
                          ((99) (case lhs (else (do-reject token))))
                          ((100) (case lhs (else (do-reject token))))
                          ((101) (case lhs (else (do-reject token))))
                          ((102) (case lhs (else (do-reject token))))
                          ((103) (case lhs (else (do-reject token))))
                          ((104) (case lhs (else (do-reject token))))
                          ((105) (case lhs (else (do-reject token))))
                          ((106) (case lhs (else (do-reject token))))
                          ((107) (case lhs (else (do-reject token))))
                          ((108) (case lhs (else (do-reject token))))
                          ((109) (case lhs (else (do-reject token))))
                          ((110) (case lhs (else (do-reject token))))
                          ((111) (case lhs (else (do-reject token))))
                          ((112) (case lhs (else (do-reject token))))
                          ((113) (case lhs (else (do-reject token))))
                          ((114) (case lhs (else (do-reject token))))
                          ((115) (case lhs (else (do-reject token))))
                          ((116) (case lhs (else (do-reject token))))
                          ((117) (case lhs (else (do-reject token))))
                          ((118) (case lhs (else (do-reject token))))
                          ((119) (case lhs (else (do-reject token))))
                          ((120) (case lhs (else (do-reject token))))
                          ((121) (case lhs (else (do-reject token))))
                          ((122) (case lhs (else (do-reject token))))
                          ((123) (case lhs (else (do-reject token))))
                          ((124) (case lhs (else (do-reject token))))
                          ((125) (case lhs (else (do-reject token))))
                          ((126) (case lhs (else (do-reject token))))
                          ((127) (case lhs (else (do-reject token))))
                          ((128) (case lhs (else (do-reject token))))
                          ((129) (case lhs (else (do-reject token))))
                          ((130) (case lhs (else (do-reject token))))
                          ((131) (case lhs (else (do-reject token))))
                          ((132) (case lhs (else (do-reject token))))
                          ((133) (case lhs (else (do-reject token))))
                          ((134) (case lhs (else (do-reject token))))
                          ((135) (case lhs (else (do-reject token))))
                          ((136) (case lhs (else (do-reject token))))
                          ((137) (case lhs (else (do-reject token))))
                          ((138) (case lhs (else (do-reject token))))
                          ((139) (case lhs (else (do-reject token))))
                          ((140) (case lhs (else (do-reject token))))
                          ((141) (case lhs (else (do-reject token))))
                          ((142) (case lhs (else (do-reject token))))
                          ((143) (case lhs (else (do-reject token))))
                          ((144) (case lhs (else (do-reject token))))
                          ((145) (case lhs (else (do-reject token))))
                          ((146) (case lhs (else (do-reject token))))
                          ((147) (case lhs (else (do-reject token))))
                          ((148) (case lhs (else (do-reject token))))
                          ((149) (case lhs (else (do-reject token))))
                          ((150) (case lhs (else (do-reject token))))
                          ((151) (case lhs (else (do-reject token))))
                          ((152) (case lhs (else (do-reject token))))
                          ((153) (case lhs (else (do-reject token))))
                          ((154) (case lhs (else (do-reject token))))
                          ((155) (case lhs (else (do-reject token))))
                          ((156) (case lhs (else (do-reject token))))
                          ((157) (case lhs (else (do-reject token))))
                          ((158) (case lhs (else (do-reject token))))
                          ((159) (case lhs (else (do-reject token))))
                          ((160) (case lhs (else (do-reject token))))
                          ((161) (case lhs (else (do-reject token))))
                          ((162) (case lhs (else (do-reject token))))
                          ((163) (case lhs (else (do-reject token))))
                          ((164) (case lhs (else (do-reject token))))
                          ((165) (case lhs (else (do-reject token))))
                          ((166) (case lhs (else (do-reject token))))
                          ((167) (case lhs (else (do-reject token))))
                          ((168) (case lhs (else (do-reject token))))
                          ((169) (case lhs (else (do-reject token))))
                          ((170) (case lhs (else (do-reject token))))
                          ((171) (case lhs (else (do-reject token))))
                          ((172) (case lhs (else (do-reject token))))
                          ((173) (case lhs (else (do-reject token))))
                          ((174) (case lhs (else (do-reject token))))
                          ((175) (case lhs (else (do-reject token))))
                          ((176) (case lhs (else (do-reject token))))
                          ((177) (case lhs (else (do-reject token))))
                          ((178) (case lhs (else (do-reject token))))
                          ((179) (case lhs (else (do-reject token))))
                          ((180) (case lhs (else (do-reject token))))
                          ((181) (case lhs (else (do-reject token))))
                          ((182) (case lhs (else (do-reject token))))
                          ((183) (case lhs (else (do-reject token))))
                          ((184) (case lhs (else (do-reject token))))
                          ((185) (case lhs (else (do-reject token))))
                          ((186) (case lhs (else (do-reject token))))
                          ((187) (case lhs (else (do-reject token))))
                          ((188) (case lhs (else (do-reject token))))
                          ((189) (case lhs (else (do-reject token))))
                          ((190) (case lhs (else (do-reject token))))
                          ((191) (case lhs (else (do-reject token))))
                          ((192) (case lhs (else (do-reject token))))
                          ((193) (case lhs (else (do-reject token))))
                          ((194) (case lhs (else (do-reject token))))
                          ((195) (case lhs (else (do-reject token))))
                          ((196) (case lhs (else (do-reject token))))
                          ((197) (case lhs (else (do-reject token))))
                          ((198) (case lhs (else (do-reject token))))
                          ((199) (case lhs (else (do-reject token))))
                          ((200) (case lhs (else (do-reject token))))
                          ((201) (case lhs (else (do-reject token))))
                          ((202) (case lhs (else (do-reject token))))
                          ((203) (case lhs (else (do-reject token))))
                          ((204) (case lhs (else (do-reject token))))
                          ((205) (case lhs (else (do-reject token))))
                          ((206) (case lhs (else (do-reject token))))
                          ((207) (case lhs (else (do-reject token))))
                          ((208) (case lhs (else (do-reject token))))
                          ((209) (case lhs (else (do-reject token))))
                          ((210) (case lhs (else (do-reject token))))
                          ((211) (case lhs (else (do-reject token))))
                          ((212) (case lhs (else (do-reject token))))
                          ((213) (case lhs (else (do-reject token))))
                          ((214) (case lhs (else (do-reject token))))
                          ((215) (case lhs (else (do-reject token))))
                          ((216) (case lhs (else (do-reject token))))
                          ((217) (case lhs (else (do-reject token))))
                          ((218) (case lhs (else (do-reject token))))
                          ((219) (case lhs (else (do-reject token))))
                          ((220) (case lhs (else (do-reject token))))
                          ((221) (case lhs (else (do-reject token))))
                          ((222) (case lhs (else (do-reject token))))
                          ((223) (case lhs (else (do-reject token))))
                          ((224) (case lhs (else (do-reject token))))
                          ((225) (case lhs (else (do-reject token))))
                          ((226) (case lhs (else (do-reject token))))
                          ((227) (case lhs (else (do-reject token))))
                          ((228) (case lhs (else (do-reject token))))
                          ((229) (case lhs (else (do-reject token))))
                          ((230) (case lhs (else (do-reject token))))
                          ((231) (case lhs (else (do-reject token))))
                          ((232) (case lhs (else (do-reject token))))
                          ((233) (case lhs (else (do-reject token))))
                          ((234) (case lhs (else (do-reject token))))
                          ((235) (case lhs (else (do-reject token))))
                          ((236) (case lhs (else (do-reject token))))
                          ((237) (case lhs (else (do-reject token))))
                          ((238) (case lhs (else (do-reject token))))
                          ((239) (case lhs (else (do-reject token))))
                          ((240) (case lhs (else (do-reject token))))
                          ((241) (case lhs (else (do-reject token))))
                          ((242) (case lhs (else (do-reject token))))
                          ((243) (case lhs (else (do-reject token))))
                          ((244) (case lhs (else (do-reject token))))
                          ((245) (case lhs (else (do-reject token))))
                          ((246) (case lhs (else (do-reject token))))
                          ((247) (case lhs (else (do-reject token))))
                          ((248) (case lhs (else (do-reject token))))
                          ((249) (case lhs (else (do-reject token))))
                          ((250) (case lhs (else (do-reject token))))
                          ((251) (case lhs (else (do-reject token))))
                          ((252) (case lhs (else (do-reject token))))
                          ((253) (case lhs (else (do-reject token))))
                          ((254) (case lhs (else (do-reject token))))
                          ((255) (case lhs (else (do-reject token))))
                          ((256) (case lhs (else (do-reject token))))
                          ((257) (case lhs (else (do-reject token))))
                          ((258) (case lhs (else (do-reject token))))
                          ((259) (case lhs (else (do-reject token))))
                          ((260) (case lhs (else (do-reject token))))
                          ((261) (case lhs (else (do-reject token))))
                          ((262) (case lhs (else (do-reject token))))
                          ((263) (case lhs (else (do-reject token))))
                          ((264) (case lhs (else (do-reject token))))
                          ((265) (case lhs (else (do-reject token))))
                          ((266) (case lhs (else (do-reject token))))
                          ((267) (case lhs (else (do-reject token))))
                          ((268) (case lhs (else (do-reject token))))
                          ((269) (case lhs (else (do-reject token))))
                          ((270) (case lhs (else (do-reject token))))
                          ((271) (case lhs (else (do-reject token))))
                          ((272) (case lhs (else (do-reject token))))
                          ((273) (case lhs (else (do-reject token))))
                          ((274) (case lhs (else (do-reject token))))
                          ((275) (case lhs (else (do-reject token))))
                          ((276) (case lhs (else (do-reject token))))
                          ((277) (case lhs (else (do-reject token))))
                          ((278) (case lhs (else (do-reject token))))
                          ((279) (case lhs (else (do-reject token))))
                          ((280) (case lhs (else (do-reject token))))
                          ((281) (case lhs (else (do-reject token))))
                          ((282) (case lhs (else (do-reject token))))
                          ((283) (case lhs (else (do-reject token))))
                          ((284) (case lhs (else (do-reject token))))
                          ((285) (case lhs (else (do-reject token))))
                          ((286) (case lhs (else (do-reject token))))
                          ((287) (case lhs (else (do-reject token))))
                          ((288) (case lhs (else (do-reject token))))
                          ((289) (case lhs (else (do-reject token))))
                          ((290) (case lhs (else (do-reject token))))
                          ((291) (case lhs (else (do-reject token))))
                          ((292) (case lhs (else (do-reject token))))
                          ((293) (case lhs (else (do-reject token))))
                          ((294) (case lhs (else (do-reject token))))
                          ((295) (case lhs (else (do-reject token))))
                          ((296) (case lhs (else (do-reject token))))
                          ((297) (case lhs (else (do-reject token))))
                          ((298) (case lhs (else (do-reject token))))
                          ((299) (case lhs (else (do-reject token))))
                          ((300) (case lhs (else (do-reject token))))
                          ((301)
                           (case lhs
                             ((op)
                              (loop-with-input
                                307
                                token
                                category
                                source
                                value))
                             (else (do-reject token))))
                          ((302) (case lhs (else (do-reject token))))
                          ((303) (case lhs (else (do-reject token))))
                          ((304) (case lhs (else (do-reject token))))
                          ((305) (case lhs (else (do-reject token))))
                          ((306) (case lhs (else (do-reject token))))
                          ((307)
                           (case lhs
                             ((term)
                              (loop-with-input
                                301
                                token
                                category
                                source
                                value))
                             ((expr)
                              (loop-with-input
                                308
                                token
                                category
                                source
                                value))
                             (else (do-reject token))))
                          ((308) (case lhs (else (do-reject token))))
                          ((309) (case lhs (else (do-reject token))))
                          (else (do-reject token))))
                      (case state
                        ((0)
                         (case category
                           ((n99) (process-shift 300))
                           ((n98) (process-shift 299))
                           ((n97) (process-shift 298))
                           ((n96) (process-shift 297))
                           ((n95) (process-shift 296))
                           ((n94) (process-shift 295))
                           ((n93) (process-shift 294))
                           ((n92) (process-shift 293))
                           ((n91) (process-shift 292))
                           ((n90) (process-shift 291))
                           ((n9) (process-shift 290))
                           ((n89) (process-shift 289))
                           ((n88) (process-shift 288))
                           ((n87) (process-shift 287))
                           ((n86) (process-shift 286))
                           ((n85) (process-shift 285))
                           ((n84) (process-shift 284))
                           ((n83) (process-shift 283))
                           ((n82) (process-shift 282))
                           ((n81) (process-shift 281))
                           ((n80) (process-shift 280))
                           ((n8) (process-shift 279))
                           ((n79) (process-shift 278))
                           ((n78) (process-shift 277))
                           ((n77) (process-shift 276))
                           ((n76) (process-shift 275))
                           ((n75) (process-shift 274))
                           ((n74) (process-shift 273))
                           ((n73) (process-shift 272))
                           ((n72) (process-shift 271))
                           ((n71) (process-shift 270))
                           ((n70) (process-shift 269))
                           ((n7) (process-shift 268))
                           ((n69) (process-shift 267))
                           ((n68) (process-shift 266))
                           ((n67) (process-shift 265))
                           ((n66) (process-shift 264))
                           ((n65) (process-shift 263))
                           ((n64) (process-shift 262))
                           ((n63) (process-shift 261))
                           ((n62) (process-shift 260))
                           ((n61) (process-shift 259))
                           ((n60) (process-shift 258))
                           ((n6) (process-shift 257))
                           ((n59) (process-shift 256))
                           ((n58) (process-shift 255))
                           ((n57) (process-shift 254))
                           ((n56) (process-shift 253))
                           ((n55) (process-shift 252))
                           ((n54) (process-shift 251))
                           ((n53) (process-shift 250))
                           ((n52) (process-shift 249))
                           ((n51) (process-shift 248))
                           ((n50) (process-shift 247))
                           ((n5) (process-shift 246))
                           ((n49) (process-shift 245))
                           ((n48) (process-shift 244))
                           ((n47) (process-shift 243))
                           ((n46) (process-shift 242))
                           ((n45) (process-shift 241))
                           ((n44) (process-shift 240))
                           ((n43) (process-shift 239))
                           ((n42) (process-shift 238))
                           ((n41) (process-shift 237))
                           ((n40) (process-shift 236))
                           ((n4) (process-shift 235))
                           ((n39) (process-shift 234))
                           ((n38) (process-shift 233))
                           ((n37) (process-shift 232))
                           ((n36) (process-shift 231))
                           ((n35) (process-shift 230))
                           ((n34) (process-shift 229))
                           ((n33) (process-shift 228))
                           ((n32) (process-shift 227))
                           ((n31) (process-shift 226))
                           ((n300) (process-shift 225))
                           ((n30) (process-shift 224))
                           ((n3) (process-shift 223))
                           ((n299) (process-shift 222))
                           ((n298) (process-shift 221))
                           ((n297) (process-shift 220))
                           ((n296) (process-shift 219))
                           ((n295) (process-shift 218))
                           ((n294) (process-shift 217))
                           ((n293) (process-shift 216))
                           ((n292) (process-shift 215))
                           ((n291) (process-shift 214))
                           ((n290) (process-shift 213))
                           ((n29) (process-shift 212))
                           ((n289) (process-shift 211))
                           ((n288) (process-shift 210))
                           ((n287) (process-shift 209))
                           ((n286) (process-shift 208))
                           ((n285) (process-shift 207))
                           ((n284) (process-shift 206))
                           ((n283) (process-shift 205))
                           ((n282) (process-shift 204))
                           ((n281) (process-shift 203))
                           ((n280) (process-shift 202))
                           ((n28) (process-shift 201))
                           ((n279) (process-shift 200))
                           ((n278) (process-shift 199))
                           ((n277) (process-shift 198))
                           ((n276) (process-shift 197))
                           ((n275) (process-shift 196))
                           ((n274) (process-shift 195))
                           ((n273) (process-shift 194))
                           ((n272) (process-shift 193))
                           ((n271) (process-shift 192))
                           ((n270) (process-shift 191))
                           ((n27) (process-shift 190))
                           ((n269) (process-shift 189))
                           ((n268) (process-shift 188))
                           ((n267) (process-shift 187))
                           ((n266) (process-shift 186))
                           ((n265) (process-shift 185))
                           ((n264) (process-shift 184))
                           ((n263) (process-shift 183))
                           ((n262) (process-shift 182))
                           ((n261) (process-shift 181))
                           ((n260) (process-shift 180))
                           ((n26) (process-shift 179))
                           ((n259) (process-shift 178))
                           ((n258) (process-shift 177))
                           ((n257) (process-shift 176))
                           ((n256) (process-shift 175))
                           ((n255) (process-shift 174))
                           ((n254) (process-shift 173))
                           ((n253) (process-shift 172))
                           ((n252) (process-shift 171))
                           ((n251) (process-shift 170))
                           ((n250) (process-shift 169))
                           ((n25) (process-shift 168))
                           ((n249) (process-shift 167))
                           ((n248) (process-shift 166))
                           ((n247) (process-shift 165))
                           ((n246) (process-shift 164))
                           ((n245) (process-shift 163))
                           ((n244) (process-shift 162))
                           ((n243) (process-shift 161))
                           ((n242) (process-shift 160))
                           ((n241) (process-shift 159))
                           ((n240) (process-shift 158))
                           ((n24) (process-shift 157))
                           ((n239) (process-shift 156))
                           ((n238) (process-shift 155))
                           ((n237) (process-shift 154))
                           ((n236) (process-shift 153))
                           ((n235) (process-shift 152))
                           ((n234) (process-shift 151))
                           ((n233) (process-shift 150))
                           ((n232) (process-shift 149))
                           ((n231) (process-shift 148))
                           ((n230) (process-shift 147))
                           ((n23) (process-shift 146))
                           ((n229) (process-shift 145))
                           ((n228) (process-shift 144))
                           ((n227) (process-shift 143))
                           ((n226) (process-shift 142))
                           ((n225) (process-shift 141))
                           ((n224) (process-shift 140))
                           ((n223) (process-shift 139))
                           ((n222) (process-shift 138))
                           ((n221) (process-shift 137))
                           ((n220) (process-shift 136))
                           ((n22) (process-shift 135))
                           ((n219) (process-shift 134))
                           ((n218) (process-shift 133))
                           ((n217) (process-shift 132))
                           ((n216) (process-shift 131))
                           ((n215) (process-shift 130))
                           ((n214) (process-shift 129))
                           ((n213) (process-shift 128))
                           ((n212) (process-shift 127))
                           ((n211) (process-shift 126))
                           ((n210) (process-shift 125))
                           ((n21) (process-shift 124))
                           ((n209) (process-shift 123))
                           ((n208) (process-shift 122))
                           ((n207) (process-shift 121))
                           ((n206) (process-shift 120))
                           ((n205) (process-shift 119))
                           ((n204) (process-shift 118))
                           ((n203) (process-shift 117))
                           ((n202) (process-shift 116))
                           ((n201) (process-shift 115))
                           ((n200) (process-shift 114))
                           ((n20) (process-shift 113))
                           ((n2) (process-shift 112))
                           ((n199) (process-shift 111))
                           ((n198) (process-shift 110))
                           ((n197) (process-shift 109))
                           ((n196) (process-shift 108))
                           ((n195) (process-shift 107))
                           ((n194) (process-shift 106))
                           ((n193) (process-shift 105))
                           ((n192) (process-shift 104))
                           ((n191) (process-shift 103))
                           ((n190) (process-shift 102))
                           ((n19) (process-shift 101))
                           ((n189) (process-shift 100))
                           ((n188) (process-shift 99))
                           ((n187) (process-shift 98))
                           ((n186) (process-shift 97))
                           ((n185) (process-shift 96))
                           ((n184) (process-shift 95))
                           ((n183) (process-shift 94))
                           ((n182) (process-shift 93))
                           ((n181) (process-shift 92))
                           ((n180) (process-shift 91))
                           ((n18) (process-shift 90))
                           ((n179) (process-shift 89))
                           ((n178) (process-shift 88))
                           ((n177) (process-shift 87))
                           ((n176) (process-shift 86))
                           ((n175) (process-shift 85))
                           ((n174) (process-shift 84))
                           ((n173) (process-shift 83))
                           ((n172) (process-shift 82))
                           ((n171) (process-shift 81))
                           ((n170) (process-shift 80))
                           ((n17) (process-shift 79))
                           ((n169) (process-shift 78))
                           ((n168) (process-shift 77))
                           ((n167) (process-shift 76))
                           ((n166) (process-shift 75))
                           ((n165) (process-shift 74))
                           ((n164) (process-shift 73))
                           ((n163) (process-shift 72))
                           ((n162) (process-shift 71))
                           ((n161) (process-shift 70))
                           ((n160) (process-shift 69))
                           ((n16) (process-shift 68))
                           ((n159) (process-shift 67))
                           ((n158) (process-shift 66))
                           ((n157) (process-shift 65))
                           ((n156) (process-shift 64))
                           ((n155) (process-shift 63))
                           ((n154) (process-shift 62))
                           ((n153) (process-shift 61))
                           ((n152) (process-shift 60))
                           ((n151) (process-shift 59))
                           ((n150) (process-shift 58))
                           ((n15) (process-shift 57))
                           ((n149) (process-shift 56))
                           ((n148) (process-shift 55))
                           ((n147) (process-shift 54))
                           ((n146) (process-shift 53))
                           ((n145) (process-shift 52))
                           ((n144) (process-shift 51))
                           ((n143) (process-shift 50))
                           ((n142) (process-shift 49))
                           ((n141) (process-shift 48))
                           ((n140) (process-shift 47))
                           ((n14) (process-shift 46))
                           ((n139) (process-shift 45))
                           ((n138) (process-shift 44))
                           ((n137) (process-shift 43))
                           ((n136) (process-shift 42))
                           ((n135) (process-shift 41))
                           ((n134) (process-shift 40))
                           ((n133) (process-shift 39))
                           ((n132) (process-shift 38))
                           ((n131) (process-shift 37))
                           ((n130) (process-shift 36))
                           ((n13) (process-shift 35))
                           ((n129) (process-shift 34))
                           ((n128) (process-shift 33))
                           ((n127) (process-shift 32))
                           ((n126) (process-shift 31))
                           ((n125) (process-shift 30))
                           ((n124) (process-shift 29))
                           ((n123) (process-shift 28))
                           ((n122) (process-shift 27))
                           ((n121) (process-shift 26))
                           ((n120) (process-shift 25))
                           ((n12) (process-shift 24))
                           ((n119) (process-shift 23))
                           ((n118) (process-shift 22))
                           ((n117) (process-shift 21))
                           ((n116) (process-shift 20))
                           ((n115) (process-shift 19))
                           ((n114) (process-shift 18))
                           ((n113) (process-shift 17))
                           ((n112) (process-shift 16))
                           ((n111) (process-shift 15))
                           ((n110) (process-shift 14))
                           ((n11) (process-shift 13))
                           ((n109) (process-shift 12))
                           ((n108) (process-shift 11))
                           ((n107) (process-shift 10))
                           ((n106) (process-shift 9))
                           ((n105) (process-shift 8))
                           ((n104) (process-shift 7))
                           ((n103) (process-shift 6))
                           ((n102) (process-shift 5))
                           ((n101) (process-shift 4))
                           ((n100) (process-shift 3))
                           ((n10) (process-shift 2))
                           ((n1) (process-shift 1))
                           (else (do-reject token))))
                        ((1)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((2)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((3)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((4)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((5)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((6)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((7)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((8)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((9)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((10)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((11)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((12)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((13)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((14)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((15)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((16)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((17)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((18)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((19)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((20)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((21)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((22)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((23)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((24)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((25)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((26)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((27)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((28)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((29)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((30)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((31)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((32)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((33)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((34)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((35)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((36)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((37)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((38)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((39)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((40)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((41)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((42)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((43)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((44)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((45)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((46)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((47)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((48)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((49)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((50)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((51)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((52)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((53)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((54)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((55)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((56)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((57)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((58)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((59)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((60)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((61)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((62)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((63)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((64)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((65)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((66)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((67)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((68)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((69)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((70)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((71)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((72)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((73)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((74)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((75)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((76)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((77)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((78)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((79)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((80)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((81)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((82)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((83)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((84)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((85)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((86)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((87)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((88)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((89)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((90)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((91)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((92)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((93)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((94)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((95)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((96)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((97)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((98)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((99)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((100)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((101)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((102)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((103)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((104)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((105)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((106)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((107)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((108)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((109)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((110)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((111)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((112)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((113)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((114)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((115)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((116)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((117)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((118)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((119)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((120)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((121)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((122)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((123)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((124)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((125)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((126)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((127)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((128)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((129)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((130)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((131)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((132)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((133)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((134)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((135)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((136)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((137)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((138)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((139)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((140)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((141)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((142)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((143)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((144)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((145)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((146)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((147)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((148)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((149)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((150)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((151)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((152)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((153)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((154)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((155)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((156)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((157)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((158)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((159)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((160)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((161)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((162)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((163)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((164)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((165)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((166)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((167)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((168)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((169)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((170)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((171)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((172)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((173)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((174)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((175)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((176)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((177)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((178)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((179)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((180)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((181)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((182)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((183)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((184)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((185)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((186)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((187)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((188)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((189)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((190)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((191)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((192)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((193)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((194)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((195)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((196)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((197)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((198)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((199)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((200)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((201)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((202)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((203)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((204)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((205)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((206)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((207)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((208)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((209)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((210)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((211)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((212)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((213)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((214)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((215)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((216)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((217)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((218)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((219)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((220)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((221)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((222)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((223)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((224)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((225)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((226)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((227)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((228)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((229)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((230)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((231)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((232)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((233)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((234)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((235)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((236)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((237)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((238)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((239)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((240)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((241)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((242)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((243)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((244)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((245)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((246)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((247)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((248)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((249)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((250)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((251)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((252)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((253)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((254)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((255)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((256)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((257)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((258)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((259)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((260)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((261)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((262)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((263)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((264)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((265)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((266)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((267)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((268)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((269)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((270)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((271)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((272)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((273)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((274)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((275)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((276)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((277)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((278)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((279)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((280)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((281)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((282)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((283)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((284)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((285)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((286)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((287)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((288)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((289)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((290)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((291)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((292)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((293)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((294)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((295)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((296)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((297)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((298)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((299)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((300)
                         (case category
                           ((^)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((-)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((+)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           ((%)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'term)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'term))
                           (else (do-reject token))))
                        ((301)
                         (case category
                           ((^) (process-shift 306))
                           ((-) (process-shift 305))
                           ((+) (process-shift 304))
                           ((*) (process-shift 303))
                           ((%) (process-shift 302))
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'expr)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'expr))
                           (else (do-reject token))))
                        ((302)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((303)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((304)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((305)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((306)
                         (case category
                           ((n9)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n99)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n98)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n97)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n96)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n95)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n94)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n93)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n92)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n91)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n90)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n8)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n89)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n88)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n87)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n86)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n85)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n84)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n83)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n82)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n81)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n80)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n7)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n79)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n78)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n77)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n76)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n75)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n74)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n73)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n72)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n71)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n70)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n6)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n69)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n68)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n67)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n66)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n65)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n64)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n63)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n62)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n61)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n60)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n5)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n59)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n58)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n57)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n56)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n55)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n54)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n53)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n52)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n51)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n50)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n4)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n49)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n48)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n47)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n46)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n45)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n44)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n43)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n42)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n41)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n40)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n3)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n39)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n38)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n37)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n36)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n35)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n34)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n33)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n32)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n31)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n30)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n300)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n2)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n29)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n299)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n298)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n297)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n296)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n295)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n294)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n293)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n292)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n291)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n290)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n28)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n289)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n288)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n287)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n286)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n285)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n284)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n283)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n282)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n281)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n280)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n27)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n279)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n278)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n277)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n276)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n275)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n274)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n273)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n272)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n271)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n270)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n26)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n269)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n268)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n267)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n266)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n265)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n264)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n263)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n262)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n261)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n260)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n25)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n259)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n258)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n257)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n256)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n255)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n254)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n253)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n252)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n251)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n250)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n24)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n249)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n248)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n247)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n246)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n245)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n244)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n243)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n242)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n241)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n240)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n23)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n239)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n238)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n237)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n236)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n235)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n234)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n233)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n232)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n231)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n230)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n22)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n229)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n228)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n227)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n226)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n225)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n224)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n223)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n222)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n221)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n220)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n21)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n219)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n218)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n217)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n216)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n215)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n214)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n213)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n212)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n211)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n210)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n20)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n209)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n208)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n207)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n206)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n205)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n204)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n203)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n202)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n201)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n200)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n1)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n19)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n199)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n198)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n197)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n196)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n195)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n194)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n193)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n192)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n191)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n190)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n18)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n189)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n188)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n187)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n186)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n185)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n184)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n183)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n182)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n181)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n180)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n17)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n179)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n178)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n177)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n176)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n175)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n174)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n173)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n172)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n171)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n170)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n16)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n169)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n168)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n167)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n166)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n165)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n164)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n163)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n162)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n161)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n160)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n15)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n159)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n158)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n157)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n156)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n155)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n154)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n153)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n152)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n151)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n150)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n14)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n149)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n148)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n147)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n146)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n145)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n144)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n143)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n142)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n141)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n140)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n13)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n139)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n138)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n137)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n136)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n135)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n134)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n133)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n132)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n131)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n130)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n12)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n129)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n128)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n127)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n126)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n125)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n124)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n123)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n122)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n121)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n120)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n11)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n119)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n118)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n117)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n116)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n115)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n114)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n113)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n112)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n111)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n110)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n10)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n109)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n108)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n107)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n106)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n105)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n104)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n103)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n102)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n101)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           ((n100)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'op)
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 1)
                            (process-goto 'op))
                           (else (do-reject token))))
                        ((307)
                         (case category
                           ((n99) (process-shift 300))
                           ((n98) (process-shift 299))
                           ((n97) (process-shift 298))
                           ((n96) (process-shift 297))
                           ((n95) (process-shift 296))
                           ((n94) (process-shift 295))
                           ((n93) (process-shift 294))
                           ((n92) (process-shift 293))
                           ((n91) (process-shift 292))
                           ((n90) (process-shift 291))
                           ((n9) (process-shift 290))
                           ((n89) (process-shift 289))
                           ((n88) (process-shift 288))
                           ((n87) (process-shift 287))
                           ((n86) (process-shift 286))
                           ((n85) (process-shift 285))
                           ((n84) (process-shift 284))
                           ((n83) (process-shift 283))
                           ((n82) (process-shift 282))
                           ((n81) (process-shift 281))
                           ((n80) (process-shift 280))
                           ((n8) (process-shift 279))
                           ((n79) (process-shift 278))
                           ((n78) (process-shift 277))
                           ((n77) (process-shift 276))
                           ((n76) (process-shift 275))
                           ((n75) (process-shift 274))
                           ((n74) (process-shift 273))
                           ((n73) (process-shift 272))
                           ((n72) (process-shift 271))
                           ((n71) (process-shift 270))
                           ((n70) (process-shift 269))
                           ((n7) (process-shift 268))
                           ((n69) (process-shift 267))
                           ((n68) (process-shift 266))
                           ((n67) (process-shift 265))
                           ((n66) (process-shift 264))
                           ((n65) (process-shift 263))
                           ((n64) (process-shift 262))
                           ((n63) (process-shift 261))
                           ((n62) (process-shift 260))
                           ((n61) (process-shift 259))
                           ((n60) (process-shift 258))
                           ((n6) (process-shift 257))
                           ((n59) (process-shift 256))
                           ((n58) (process-shift 255))
                           ((n57) (process-shift 254))
                           ((n56) (process-shift 253))
                           ((n55) (process-shift 252))
                           ((n54) (process-shift 251))
                           ((n53) (process-shift 250))
                           ((n52) (process-shift 249))
                           ((n51) (process-shift 248))
                           ((n50) (process-shift 247))
                           ((n5) (process-shift 246))
                           ((n49) (process-shift 245))
                           ((n48) (process-shift 244))
                           ((n47) (process-shift 243))
                           ((n46) (process-shift 242))
                           ((n45) (process-shift 241))
                           ((n44) (process-shift 240))
                           ((n43) (process-shift 239))
                           ((n42) (process-shift 238))
                           ((n41) (process-shift 237))
                           ((n40) (process-shift 236))
                           ((n4) (process-shift 235))
                           ((n39) (process-shift 234))
                           ((n38) (process-shift 233))
                           ((n37) (process-shift 232))
                           ((n36) (process-shift 231))
                           ((n35) (process-shift 230))
                           ((n34) (process-shift 229))
                           ((n33) (process-shift 228))
                           ((n32) (process-shift 227))
                           ((n31) (process-shift 226))
                           ((n300) (process-shift 225))
                           ((n30) (process-shift 224))
                           ((n3) (process-shift 223))
                           ((n299) (process-shift 222))
                           ((n298) (process-shift 221))
                           ((n297) (process-shift 220))
                           ((n296) (process-shift 219))
                           ((n295) (process-shift 218))
                           ((n294) (process-shift 217))
                           ((n293) (process-shift 216))
                           ((n292) (process-shift 215))
                           ((n291) (process-shift 214))
                           ((n290) (process-shift 213))
                           ((n29) (process-shift 212))
                           ((n289) (process-shift 211))
                           ((n288) (process-shift 210))
                           ((n287) (process-shift 209))
                           ((n286) (process-shift 208))
                           ((n285) (process-shift 207))
                           ((n284) (process-shift 206))
                           ((n283) (process-shift 205))
                           ((n282) (process-shift 204))
                           ((n281) (process-shift 203))
                           ((n280) (process-shift 202))
                           ((n28) (process-shift 201))
                           ((n279) (process-shift 200))
                           ((n278) (process-shift 199))
                           ((n277) (process-shift 198))
                           ((n276) (process-shift 197))
                           ((n275) (process-shift 196))
                           ((n274) (process-shift 195))
                           ((n273) (process-shift 194))
                           ((n272) (process-shift 193))
                           ((n271) (process-shift 192))
                           ((n270) (process-shift 191))
                           ((n27) (process-shift 190))
                           ((n269) (process-shift 189))
                           ((n268) (process-shift 188))
                           ((n267) (process-shift 187))
                           ((n266) (process-shift 186))
                           ((n265) (process-shift 185))
                           ((n264) (process-shift 184))
                           ((n263) (process-shift 183))
                           ((n262) (process-shift 182))
                           ((n261) (process-shift 181))
                           ((n260) (process-shift 180))
                           ((n26) (process-shift 179))
                           ((n259) (process-shift 178))
                           ((n258) (process-shift 177))
                           ((n257) (process-shift 176))
                           ((n256) (process-shift 175))
                           ((n255) (process-shift 174))
                           ((n254) (process-shift 173))
                           ((n253) (process-shift 172))
                           ((n252) (process-shift 171))
                           ((n251) (process-shift 170))
                           ((n250) (process-shift 169))
                           ((n25) (process-shift 168))
                           ((n249) (process-shift 167))
                           ((n248) (process-shift 166))
                           ((n247) (process-shift 165))
                           ((n246) (process-shift 164))
                           ((n245) (process-shift 163))
                           ((n244) (process-shift 162))
                           ((n243) (process-shift 161))
                           ((n242) (process-shift 160))
                           ((n241) (process-shift 159))
                           ((n240) (process-shift 158))
                           ((n24) (process-shift 157))
                           ((n239) (process-shift 156))
                           ((n238) (process-shift 155))
                           ((n237) (process-shift 154))
                           ((n236) (process-shift 153))
                           ((n235) (process-shift 152))
                           ((n234) (process-shift 151))
                           ((n233) (process-shift 150))
                           ((n232) (process-shift 149))
                           ((n231) (process-shift 148))
                           ((n230) (process-shift 147))
                           ((n23) (process-shift 146))
                           ((n229) (process-shift 145))
                           ((n228) (process-shift 144))
                           ((n227) (process-shift 143))
                           ((n226) (process-shift 142))
                           ((n225) (process-shift 141))
                           ((n224) (process-shift 140))
                           ((n223) (process-shift 139))
                           ((n222) (process-shift 138))
                           ((n221) (process-shift 137))
                           ((n220) (process-shift 136))
                           ((n22) (process-shift 135))
                           ((n219) (process-shift 134))
                           ((n218) (process-shift 133))
                           ((n217) (process-shift 132))
                           ((n216) (process-shift 131))
                           ((n215) (process-shift 130))
                           ((n214) (process-shift 129))
                           ((n213) (process-shift 128))
                           ((n212) (process-shift 127))
                           ((n211) (process-shift 126))
                           ((n210) (process-shift 125))
                           ((n21) (process-shift 124))
                           ((n209) (process-shift 123))
                           ((n208) (process-shift 122))
                           ((n207) (process-shift 121))
                           ((n206) (process-shift 120))
                           ((n205) (process-shift 119))
                           ((n204) (process-shift 118))
                           ((n203) (process-shift 117))
                           ((n202) (process-shift 116))
                           ((n201) (process-shift 115))
                           ((n200) (process-shift 114))
                           ((n20) (process-shift 113))
                           ((n2) (process-shift 112))
                           ((n199) (process-shift 111))
                           ((n198) (process-shift 110))
                           ((n197) (process-shift 109))
                           ((n196) (process-shift 108))
                           ((n195) (process-shift 107))
                           ((n194) (process-shift 106))
                           ((n193) (process-shift 105))
                           ((n192) (process-shift 104))
                           ((n191) (process-shift 103))
                           ((n190) (process-shift 102))
                           ((n19) (process-shift 101))
                           ((n189) (process-shift 100))
                           ((n188) (process-shift 99))
                           ((n187) (process-shift 98))
                           ((n186) (process-shift 97))
                           ((n185) (process-shift 96))
                           ((n184) (process-shift 95))
                           ((n183) (process-shift 94))
                           ((n182) (process-shift 93))
                           ((n181) (process-shift 92))
                           ((n180) (process-shift 91))
                           ((n18) (process-shift 90))
                           ((n179) (process-shift 89))
                           ((n178) (process-shift 88))
                           ((n177) (process-shift 87))
                           ((n176) (process-shift 86))
                           ((n175) (process-shift 85))
                           ((n174) (process-shift 84))
                           ((n173) (process-shift 83))
                           ((n172) (process-shift 82))
                           ((n171) (process-shift 81))
                           ((n170) (process-shift 80))
                           ((n17) (process-shift 79))
                           ((n169) (process-shift 78))
                           ((n168) (process-shift 77))
                           ((n167) (process-shift 76))
                           ((n166) (process-shift 75))
                           ((n165) (process-shift 74))
                           ((n164) (process-shift 73))
                           ((n163) (process-shift 72))
                           ((n162) (process-shift 71))
                           ((n161) (process-shift 70))
                           ((n160) (process-shift 69))
                           ((n16) (process-shift 68))
                           ((n159) (process-shift 67))
                           ((n158) (process-shift 66))
                           ((n157) (process-shift 65))
                           ((n156) (process-shift 64))
                           ((n155) (process-shift 63))
                           ((n154) (process-shift 62))
                           ((n153) (process-shift 61))
                           ((n152) (process-shift 60))
                           ((n151) (process-shift 59))
                           ((n150) (process-shift 58))
                           ((n15) (process-shift 57))
                           ((n149) (process-shift 56))
                           ((n148) (process-shift 55))
                           ((n147) (process-shift 54))
                           ((n146) (process-shift 53))
                           ((n145) (process-shift 52))
                           ((n144) (process-shift 51))
                           ((n143) (process-shift 50))
                           ((n142) (process-shift 49))
                           ((n141) (process-shift 48))
                           ((n140) (process-shift 47))
                           ((n14) (process-shift 46))
                           ((n139) (process-shift 45))
                           ((n138) (process-shift 44))
                           ((n137) (process-shift 43))
                           ((n136) (process-shift 42))
                           ((n135) (process-shift 41))
                           ((n134) (process-shift 40))
                           ((n133) (process-shift 39))
                           ((n132) (process-shift 38))
                           ((n131) (process-shift 37))
                           ((n130) (process-shift 36))
                           ((n13) (process-shift 35))
                           ((n129) (process-shift 34))
                           ((n128) (process-shift 33))
                           ((n127) (process-shift 32))
                           ((n126) (process-shift 31))
                           ((n125) (process-shift 30))
                           ((n124) (process-shift 29))
                           ((n123) (process-shift 28))
                           ((n122) (process-shift 27))
                           ((n121) (process-shift 26))
                           ((n120) (process-shift 25))
                           ((n12) (process-shift 24))
                           ((n119) (process-shift 23))
                           ((n118) (process-shift 22))
                           ((n117) (process-shift 21))
                           ((n116) (process-shift 20))
                           ((n115) (process-shift 19))
                           ((n114) (process-shift 18))
                           ((n113) (process-shift 17))
                           ((n112) (process-shift 16))
                           ((n111) (process-shift 15))
                           ((n110) (process-shift 14))
                           ((n11) (process-shift 13))
                           ((n109) (process-shift 12))
                           ((n108) (process-shift 11))
                           ((n107) (process-shift 10))
                           ((n106) (process-shift 9))
                           ((n105) (process-shift 8))
                           ((n104) (process-shift 7))
                           ((n103) (process-shift 6))
                           ((n102) (process-shift 5))
                           ((n101) (process-shift 4))
                           ((n100) (process-shift 3))
                           ((n10) (process-shift 2))
                           ((n1) (process-shift 1))
                           (else (do-reject token))))
                        ((308)
                         (case category
                           ((*eoi*)
                            (stack-push!
                              parse-stack
                              (let ()
                                (define $0 'expr)
                                (define $3 (stack-pop! parse-stack))
                                (define $2 (stack-pop! parse-stack))
                                (define $1 (stack-pop! parse-stack))
                                (list $0 $1 $2 $3)))
                            (stack-push! state-stack state)
                            (stack-pop-multiple! state-stack 3)
                            (process-goto 'expr))
                           (else (do-reject token))))
                        ((309)
                         (case category
                           ((*eoi*) (process-accept))
                           (else (do-reject token))))
                        (else (do-reject token)))))
                  (define (get-input)
                    (define token
                      (iterator:next
                        input-tokens-iterator
                        parselynn:end-of-input))
                    (if (equal? token parselynn:end-of-input)
                      (values token token token token)
                      (let ()
                        (define category
                          (parselynn:token:category token))
                        (define source (parselynn:token:source token))
                        (define value (parselynn:token:value token))
                        (values token category source value))))
                  (define (loop state)
                    (define-values
                      (token category source value)
                      (get-input))
                    (loop-with-input
                      state
                      token
                      category
                      source
                      value))
                  (loop initial-state))))
            #()))))))

