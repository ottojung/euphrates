
(cond-expand
 (guile
  (define-module (test-compilation)
    :use-module ((euphrates absolute-posix-path-q) :select (absolute-posix-path?))
    :use-module ((euphrates alist-initialize-bang-current-setter-p) :select (alist-initialize!:current-setter/p))
    :use-module ((euphrates alist-initialize-bang-p) :select (alist-initialize!/p))
    :use-module ((euphrates alist-initialize-bang) :select (alist-initialize! alist-initialize!:current-setters alist-initialize!:get-setters alist-initialize!:makelet/static alist-initialize!:return-multiple alist-initialize!:run alist-initialize!:stop))
    :use-module ((euphrates alist-initialize-loop) :select (alist-initialize-loop))
    :use-module ((euphrates alpha-alphabet) :select (alpha/alphabet))
    :use-module ((euphrates alpha-lowercase-alphabet) :select (alpha-lowercase/alphabet))
    :use-module ((euphrates alphanum-alphabet) :select (alphanum/alphabet alphanum/alphabet/index))
    :use-module ((euphrates alphanum-lowercase-alphabet) :select (alphanum-lowercase/alphabet))
    :use-module ((euphrates append-posix-path) :select (append-posix-path))
    :use-module ((euphrates append-string-file) :select (append-string-file))
    :use-module ((euphrates apploop) :select (apploop))
    :use-module ((euphrates assert-equal-hs) :select (assert=HS))
    :use-module ((euphrates assert-equal) :select (assert=))
    :use-module ((euphrates assert-raw) :select (assert#raw))
    :use-module ((euphrates assert) :select (assert))
    :use-module ((euphrates assoc-any) :select (assoc/any))
    :use-module ((euphrates assoc-find) :select (assoc/find))
    :use-module ((euphrates assoc-or) :select (assoc-or))
    :use-module ((euphrates assoc-set-default) :select (assoc-set-default))
    :use-module ((euphrates assoc-set-value) :select (assoc-set-value))
    :use-module ((euphrates assq-or) :select (assq-or))
    :use-module ((euphrates assq-set-default) :select (assq-set-default))
    :use-module ((euphrates assq-set-value) :select (assq-set-value))
    :use-module ((euphrates asyncproc-input-text-p) :select (asyncproc-input-text/p))
    :use-module ((euphrates asyncproc-stderr) :select (asyncproc-stderr))
    :use-module ((euphrates asyncproc-stdout) :select (asyncproc-stdout))
    :use-module ((euphrates asyncproc) :select (asyncproc asyncproc-args asyncproc-command asyncproc-exited? asyncproc-pid asyncproc-pipe asyncproc-status asyncproc? set-asyncproc-exited?! set-asyncproc-pid! set-asyncproc-pipe! set-asyncproc-status!))
    :use-module ((euphrates atomic-box) :select (atomic-box-compare-and-set! atomic-box-ref atomic-box-set! atomic-box? make-atomic-box))
    :use-module ((euphrates base64-alphabet-minusunderscore) :select (base64/alphabet/minusunderscore))
    :use-module ((euphrates base64-alphabet-pluscomma) :select (base64/alphabet/pluscomma))
    :use-module ((euphrates base64-alphabet) :select (base64/alphabet))
    :use-module ((euphrates big-random-int) :select (big-random-int))
    :use-module ((euphrates bool-to-profun-result) :select (bool->profun-result))
    :use-module ((euphrates box) :select (box-ref box-set! box? make-box))
    :use-module ((euphrates builtin-descriptors) :select (builtin-descriptors))
    :use-module ((euphrates builtin-type-huh) :select (builtin-type?))
    :use-module ((euphrates call-with-finally) :select (call-with-finally))
    :use-module ((euphrates cartesian-any-q) :select (cartesian-any?))
    :use-module ((euphrates cartesian-each) :select (cartesian-each))
    :use-module ((euphrates cartesian-map) :select (cartesian-map))
    :use-module ((euphrates cartesian-product-g) :select (cartesian-product/g cartesian-product/g/reversed))
    :use-module ((euphrates cartesian-product) :select (cartesian-product))
    :use-module ((euphrates catch-any) :select (catch-any))
    :use-module ((euphrates catchu-case) :select (catchu-case))
    :use-module ((euphrates cfg-inline) :select (CFG-inline))
    :use-module ((euphrates cfg-machine) :select (make-cfg-machine make-cfg-machine* make-cfg-machine/full))
    :use-module ((euphrates cfg-parse-modifiers) :select (CFG-parse-modifiers))
    :use-module ((euphrates cfg-remove-dead-code) :select (CFG-remove-dead-code))
    :use-module ((euphrates cfg-strip-modifiers) :select (CFG-strip-modifiers))
    :use-module ((euphrates command-line-arguments-p) :select (command-line-argumets/p))
    :use-module ((euphrates comp) :select (appcomp comp))
    :use-module ((euphrates compile-cfg-cli-help) :select (CFG-AST->CFG-CLI-help))
    :use-module ((euphrates compile-cfg-cli) :select (CFG-AST->CFG-lang CFG-CLI->CFG-lang CFG-lang-modifier-char?))
    :use-module ((euphrates compile-regex-cli) :select (compile-regex-cli:IR->Regex compile-regex-cli:make-IR))
    :use-module ((euphrates compose-under-par) :select (compose-under-par))
    :use-module ((euphrates compose-under) :select (compose-under))
    :use-module ((euphrates cons-bang) :select (cons!))
    :use-module ((euphrates conss) :select (conss))
    :use-module ((euphrates convert-number-base) :select (convert-number-base convert-number-base/generic convert-number-base:default-max-base))
    :use-module ((euphrates current-directory-p) :select (current-directory/p))
    :use-module ((euphrates current-program-path-p) :select (current-program-path/p))
    :use-module ((euphrates current-random-source-p) :select (current-random-source/p))
    :use-module ((euphrates current-source-info-to-string) :select (current-source-info->string))
    :use-module ((euphrates curry-if) :select (curry-if))
    :use-module ((euphrates date-get-current-string) :select (date-get-current-string))
    :use-module ((euphrates date-get-current-time24h-string) :select (date-get-current-time24h-string))
    :use-module ((euphrates debug) :select (debug))
    :use-module ((euphrates debugs) :select (debugs))
    :use-module ((euphrates debugv) :select (debugv))
    :use-module ((euphrates define-cli) :select (define-cli:raisu/default-exit define-cli:raisu/p define-cli:show-help lambda-cli make-cli make-cli-with-handler make-cli/f make-cli/f/basic with-cli))
    :use-module ((euphrates define-dumb-record) :select (define-dumb-record))
    :use-module ((euphrates define-newtype) :select (define-newtype))
    :use-module ((euphrates define-pair) :select (define-pair))
    :use-module ((euphrates define-tuple) :select (define-tuple))
    :use-module ((euphrates define-type9) :select (define-type9 define-type9/nobind-descriptor type9-get-descriptor-by-name type9-get-record-descriptor))
    :use-module ((euphrates descriptors-registry) :select (descriptors-registry-add! descriptors-registry-decolisify-name descriptors-registry-get))
    :use-module ((euphrates directory-files-depth-foreach) :select (directory-files-depth-foreach))
    :use-module ((euphrates directory-files-depth-iter) :select (directory-files-depth-iter))
    :use-module ((euphrates directory-files-rec) :select (directory-files-rec))
    :use-module ((euphrates directory-files) :select (directory-files))
    :use-module ((euphrates directory-mtime-state) :select (directory-mtime-state))
    :use-module ((euphrates directory-tree) :select (directory-tree))
    :use-module ((euphrates dprint-p-default) :select (dprint#p-default))
    :use-module ((euphrates dprint-p) :select (dprint#p))
    :use-module ((euphrates dprint) :select (dprint))
    :use-module ((euphrates dprintln) :select (dprintln))
    :use-module ((euphrates dynamic-load) :select (dynamic-load))
    :use-module ((euphrates dynamic-thread-async-thunk) :select (dynamic-thread-async-thunk))
    :use-module ((euphrates dynamic-thread-async) :select (dynamic-thread-async))
    :use-module ((euphrates dynamic-thread-cancel-p) :select (dynamic-thread-cancel#p))
    :use-module ((euphrates dynamic-thread-cancel-tag) :select (dynamic-thread-cancel-tag))
    :use-module ((euphrates dynamic-thread-cancel) :select (dynamic-thread-cancel))
    :use-module ((euphrates dynamic-thread-critical-make-p-default) :select (dynamic-thread-critical-make#p-default))
    :use-module ((euphrates dynamic-thread-critical-make-p) :select (dynamic-thread-critical-make#p))
    :use-module ((euphrates dynamic-thread-critical-make) :select (dynamic-thread-critical-make))
    :use-module ((euphrates dynamic-thread-disable-cancel-p-default) :select (dynamic-thread-disable-cancel#p-default))
    :use-module ((euphrates dynamic-thread-disable-cancel-p) :select (dynamic-thread-disable-cancel#p))
    :use-module ((euphrates dynamic-thread-disable-cancel) :select (dynamic-thread-disable-cancel))
    :use-module ((euphrates dynamic-thread-enable-cancel-p-default) :select (dynamic-thread-enable-cancel#p-default))
    :use-module ((euphrates dynamic-thread-enable-cancel-p) :select (dynamic-thread-enable-cancel#p))
    :use-module ((euphrates dynamic-thread-enable-cancel) :select (dynamic-thread-enable-cancel))
    :use-module ((euphrates dynamic-thread-get-delay-procedure-p-default) :select (dynamic-thread-get-delay-procedure#p-default))
    :use-module ((euphrates dynamic-thread-get-delay-procedure-p) :select (dynamic-thread-get-delay-procedure#p))
    :use-module ((euphrates dynamic-thread-get-delay-procedure) :select (dynamic-thread-get-delay-procedure))
    :use-module ((euphrates dynamic-thread-get-wait-delay) :select (dynamic-thread-get-wait-delay))
    :use-module ((euphrates dynamic-thread-get-yield-procedure) :select (dynamic-thread-get-yield-procedure))
    :use-module ((euphrates dynamic-thread-mutex-lock-p-default) :select (dynamic-thread-mutex-lock!#p-default))
    :use-module ((euphrates dynamic-thread-mutex-lock-p) :select (dynamic-thread-mutex-lock!#p))
    :use-module ((euphrates dynamic-thread-mutex-lock) :select (dynamic-thread-mutex-lock!))
    :use-module ((euphrates dynamic-thread-mutex-make-p-default) :select (dynamic-thread-mutex-make#p-default))
    :use-module ((euphrates dynamic-thread-mutex-make-p) :select (dynamic-thread-mutex-make#p))
    :use-module ((euphrates dynamic-thread-mutex-make) :select (dynamic-thread-mutex-make))
    :use-module ((euphrates dynamic-thread-mutex-unlock-p-default) :select (dynamic-thread-mutex-unlock!#p-default))
    :use-module ((euphrates dynamic-thread-mutex-unlock-p) :select (dynamic-thread-mutex-unlock!#p))
    :use-module ((euphrates dynamic-thread-mutex-unlock) :select (dynamic-thread-mutex-unlock!))
    :use-module ((euphrates dynamic-thread-sleep-p-default) :select (dynamic-thread-sleep#p-default))
    :use-module ((euphrates dynamic-thread-sleep-p) :select (dynamic-thread-sleep#p))
    :use-module ((euphrates dynamic-thread-sleep) :select (dynamic-thread-sleep))
    :use-module ((euphrates dynamic-thread-spawn-p) :select (dynamic-thread-spawn#p))
    :use-module ((euphrates dynamic-thread-spawn) :select (dynamic-thread-spawn))
    :use-module ((euphrates dynamic-thread-wait-delay-p-default) :select (dynamic-thread-wait-delay#us#p-default))
    :use-module ((euphrates dynamic-thread-wait-delay-p) :select (dynamic-thread-wait-delay#us#p))
    :use-module ((euphrates dynamic-thread-yield-p-default) :select (dynamic-thread-yield#p-default))
    :use-module ((euphrates dynamic-thread-yield-p) :select (dynamic-thread-yield#p))
    :use-module ((euphrates dynamic-thread-yield) :select (dynamic-thread-yield))
    :use-module ((euphrates eval-in-current-namespace) :select (eval-in-current-namespace))
    :use-module ((euphrates exception-monad) :select (exception-monad))
    :use-module ((euphrates fast-parameterizeable-timestamp-p) :select (fast-parameterizeable-timestamp/p))
    :use-module ((euphrates file-delete) :select (file-delete))
    :use-module ((euphrates file-is-directory-q-no-readlink) :select (file-is-directory?/no-readlink))
    :use-module ((euphrates file-is-regular-file-q-no-readlink) :select (file-is-regular-file?/no-readlink))
    :use-module ((euphrates file-mtime) :select (file-mtime))
    :use-module ((euphrates file-or-directory-exists-q) :select (file-or-directory-exists?))
    :use-module ((euphrates file-size) :select (file-size))
    :use-module ((euphrates filter-monad) :select (filter-monad))
    :use-module ((euphrates fn-alist) :select (fn-alist))
    :use-module ((euphrates fn-cons) :select (fn-cons))
    :use-module ((euphrates fn-pair) :select (fn-pair))
    :use-module ((euphrates fn-tuple) :select (fn-tuple))
    :use-module ((euphrates fn) :select (fn))
    :use-module ((euphrates fp) :select (fp))
    :use-module ((euphrates get-command-line-arguments) :select (get-command-line-arguments))
    :use-module ((euphrates get-current-directory) :select (get-current-directory))
    :use-module ((euphrates get-current-program-path) :select (get-current-program-path))
    :use-module ((euphrates get-current-random-source) :select (get-current-random-source))
    :use-module ((euphrates get-current-source-file-path) :select (get-current-source-file-path))
    :use-module ((euphrates get-current-source-info) :select (get-current-source-info))
    :use-module ((euphrates get-directory-name) :select (get-directory-name))
    :use-module ((euphrates get-object-descriptor) :select (get-object-descriptor))
    :use-module ((euphrates global-debug-mode-filter) :select (global-debug-mode-filter))
    :use-module ((euphrates group-by-sequential) :select (group-by/sequential group-by/sequential*))
    :use-module ((euphrates hashmap-obj) :select (hashmap-constructor hashmap-predicate))
    :use-module ((euphrates hashmap) :select (alist->hashmap hashmap->alist hashmap-clear! hashmap-copy hashmap-count hashmap-delete! hashmap-foreach hashmap-has? hashmap-map hashmap-merge hashmap-merge! hashmap-ref hashmap-set! hashmap? make-hashmap multi-alist->hashmap))
    :use-module ((euphrates hashset-obj) :select (hashset-constructor hashset-predicate hashset-value))
    :use-module ((euphrates hashset) :select (hashset->list hashset-add! hashset-clear! hashset-delete! hashset-difference hashset-equal? hashset-foreach hashset-has? hashset-intersection hashset-length hashset-map hashset-ref hashset-union list->hashset make-hashset vector->hashset))
    :use-module ((euphrates identity-monad) :select (identity-monad))
    :use-module ((euphrates identity-star) :select (identity*))
    :use-module ((euphrates immutable-hashmap-obj) :select (immutable-hashmap-constructor immutable-hashmap-predicate immutable-hashmap-value))
    :use-module ((euphrates immutable-hashmap) :select (alist->immutable-hashmap immutable-hashmap->alist immutable-hashmap-clear immutable-hashmap-copy immutable-hashmap-count immutable-hashmap-foreach immutable-hashmap-fromlist immutable-hashmap-map immutable-hashmap-ref immutable-hashmap-ref/first immutable-hashmap-set immutable-hashmap? make-immutable-hashmap))
    :use-module ((euphrates json-parse) :select (json-parse))
    :use-module ((euphrates lazy-monad) :select (lazy-monad))
    :use-module ((euphrates lazy-parameter) :select (lazy-parameter))
    :use-module ((euphrates letin) :select (letin))
    :use-module ((euphrates lexical-scope-obj) :select (lexical-scope-unwrap lexical-scope-wrap lexical-scope?))
    :use-module ((euphrates lexical-scope) :select (lexical-scope-make lexical-scope-namespace lexical-scope-ref lexical-scope-set! lexical-scope-stage! lexical-scope-unstage!))
    :use-module ((euphrates linear-interpolation) :select (linear-interpolate-1d linear-interpolate-2d))
    :use-module ((euphrates lines-to-string) :select (lines->string))
    :use-module ((euphrates linux-get-memory-stat) :select (linux-get-memory-free% linux-get-memory-stat))
    :use-module ((euphrates list-and-map) :select (list-and-map))
    :use-module ((euphrates list-break) :select (list-break))
    :use-module ((euphrates list-chunks) :select (list-chunks))
    :use-module ((euphrates list-combinations) :select (list-combinations))
    :use-module ((euphrates list-deduplicate) :select (list-deduplicate list-deduplicate/reverse))
    :use-module ((euphrates list-drop-n) :select (list-drop-n))
    :use-module ((euphrates list-drop-while) :select (list-drop-while))
    :use-module ((euphrates list-find-first) :select (list-find-first))
    :use-module ((euphrates list-fold-star) :select (list-fold*))
    :use-module ((euphrates list-fold) :select (list-fold))
    :use-module ((euphrates list-group-by) :select (list-group-by))
    :use-module ((euphrates list-init) :select (list-init))
    :use-module ((euphrates list-insert-at) :select (list-insert-at))
    :use-module ((euphrates list-intersperse) :select (list-intersperse))
    :use-module ((euphrates list-last) :select (list-last))
    :use-module ((euphrates list-length-eq) :select (list-length=))
    :use-module ((euphrates list-length-geq-q) :select (list-length=<?))
    :use-module ((euphrates list-levenshtein-distance) :select (list-levenshtein-distance))
    :use-module ((euphrates list-map-first) :select (list-map-first))
    :use-module ((euphrates list-map-flatten) :select (list-map/flatten))
    :use-module ((euphrates list-maximal-element-or) :select (list-maximal-element-or))
    :use-module ((euphrates list-minimal-element-or) :select (list-minimal-element-or))
    :use-module ((euphrates list-or-map) :select (list-or-map))
    :use-module ((euphrates list-partition) :select (list-partition))
    :use-module ((euphrates list-permutations) :select (list-permutations))
    :use-module ((euphrates list-prefix-q) :select (list-prefix?))
    :use-module ((euphrates list-random-element) :select (list-random-element))
    :use-module ((euphrates list-random-shuffle) :select (list-random-shuffle))
    :use-module ((euphrates list-ref-or) :select (list-ref-or))
    :use-module ((euphrates list-remove-common-prefix) :select (list-remove-common-prefix))
    :use-module ((euphrates list-replace-last) :select (list-replace-last-element))
    :use-module ((euphrates list-singleton-q) :select (list-singleton?))
    :use-module ((euphrates list-span-n) :select (list-span-n))
    :use-module ((euphrates list-span-while) :select (list-span-while))
    :use-module ((euphrates list-span) :select (list-span))
    :use-module ((euphrates list-split-on) :select (list-split-on))
    :use-module ((euphrates list-tag-next) :select (list-tag/next list-tag/next/rev list-untag/next))
    :use-module ((euphrates list-tag-prev) :select (list-tag/prev list-tag/prev/rev))
    :use-module ((euphrates list-tag) :select (list-tag list-untag))
    :use-module ((euphrates list-take-n) :select (list-take-n))
    :use-module ((euphrates list-take-while) :select (list-take-while))
    :use-module ((euphrates list-to-tree) :select (list->tree))
    :use-module ((euphrates list-traverse) :select (list-traverse))
    :use-module ((euphrates list-windows) :select (list-windows))
    :use-module ((euphrates list-zip-with) :select (list-zip-with))
    :use-module ((euphrates list-zip) :select (list-zip))
    :use-module ((euphrates log-monad) :select (log-monad))
    :use-module ((euphrates make-directories) :select (make-directories))
    :use-module ((euphrates make-temporary-filename) :select (make-temporary-filename))
    :use-module ((euphrates make-temporary-fileport) :select (make-temporary-fileport))
    :use-module ((euphrates make-unique) :select (make-unique))
    :use-module ((euphrates maybe-monad) :select (maybe-monad))
    :use-module ((euphrates md5) :select (md5-digest))
    :use-module ((euphrates mdict) :select (ahash->mdict hash->mdict mdict mdict->alist mdict-has? mdict-keys mdict-set!))
    :use-module ((euphrates memconst) :select (memconst))
    :use-module ((euphrates mimetype-extensions) :select (mimetype/extensions))
    :use-module ((euphrates monad-apply) :select (monad-apply))
    :use-module ((euphrates monad-ask) :select (monad-ask))
    :use-module ((euphrates monad-bind) :select (monad-bind))
    :use-module ((euphrates monad-compose) :select (monad-compose))
    :use-module ((euphrates monad-current-p) :select (monad-current/p))
    :use-module ((euphrates monad-do) :select (monad-do monad-do/generic))
    :use-module ((euphrates monad-make-hook) :select (monad-make/hook))
    :use-module ((euphrates monad-make-no-cont-no-fin) :select (monad-make/no-cont/no-fin))
    :use-module ((euphrates monad-make-no-cont) :select (monad-make/no-cont))
    :use-module ((euphrates monad-make-no-fin) :select (monad-make/no-fin))
    :use-module ((euphrates monad-make) :select (monad-make))
    :use-module ((euphrates monad-parameterize) :select (monad-parameterize with-monad-left with-monad-right))
    :use-module ((euphrates monad-transformer-current-p) :select (monad-transformer-current/p))
    :use-module ((euphrates monadfinobj) :select (monadfinobj monadfinobj-lval monadfinobj?))
    :use-module ((euphrates monadic-id) :select (monadic-id))
    :use-module ((euphrates monadic) :select (monadic monadic-bare))
    :use-module ((euphrates monadobj) :select (monadobj-constructor monadobj-handles-fin? monadobj-procedure monadobj-uses-continuations? monadobj?))
    :use-module ((euphrates monadstate-current-p) :select (monadstate-current/p))
    :use-module ((euphrates monadstate) :select (monadstate-arg monadstate-args monadstate-cret monadstate-cret/thunk monadstate-handle-multiple monadstate-lval monadstate-make-empty monadstate-qtags monadstate-qval monadstate-qvar monadstate-replicate-multiple monadstate-ret monadstate-ret/thunk monadstate?))
    :use-module ((euphrates monadstateobj) :select (monadstateobj monadstateobj-cont monadstateobj-lval monadstateobj-qtags monadstateobj-qval monadstateobj-qvar monadstateobj?))
    :use-module ((euphrates multiset-obj) :select (multiset-constructor multiset-predicate multiset-value))
    :use-module ((euphrates multiset) :select (list->multiset make-multiset multiset->list multiset-add! multiset-equal? multiset-filter multiset-ref multiset? vector->multiset))
    :use-module ((euphrates node-directed-obj) :select (node/directed node/directed-children node/directed-label node/directed? set-node/directed-children! set-node/directed-label!))
    :use-module ((euphrates node-directed) :select (make-node/directed))
    :use-module ((euphrates np-thread-obj) :select (np-thread-obj np-thread-obj-cancel-enabled? np-thread-obj-cancel-scheduled? np-thread-obj-continuation np-thread-obj? set-np-thread-obj-cancel-enabled?! set-np-thread-obj-cancel-scheduled?! set-np-thread-obj-continuation!))
    :use-module ((euphrates np-thread-parameterize) :select (np-thread-parameterize-env with-np-thread-env/non-interruptible))
    :use-module ((euphrates np-thread) :select (np-thread-global-cancel np-thread-global-critical-make np-thread-global-disable-cancel np-thread-global-enable-cancel np-thread-global-mutex-lock! np-thread-global-mutex-make np-thread-global-mutex-unlock! np-thread-global-sleep np-thread-global-spawn np-thread-global-yield np-thread-make-env))
    :use-module ((euphrates number-list) :select (number->number-list number->number-list:precision/p number-list->number number-list->number-list))
    :use-module ((euphrates open-cond-obj) :select (open-cond-constructor open-cond-predicate open-cond-value set-open-cond-value!))
    :use-module ((euphrates open-cond) :select (define-open-cond define-open-cond-instance open-cond-lambda open-cond?))
    :use-module ((euphrates open-file-port) :select (open-file-port))
    :use-module ((euphrates package) :select (make-package make-static-package use-svars with-package with-svars))
    :use-module ((euphrates parse-cfg-cli) :select (CFG-CLI->CFG-AST))
    :use-module ((euphrates partial-apply) :select (partial-apply))
    :use-module ((euphrates partial-apply1) :select (partial-apply1))
    :use-module ((euphrates path-extension) :select (path-extension))
    :use-module ((euphrates path-extensions) :select (path-extensions))
    :use-module ((euphrates path-get-basename) :select (path-get-basename))
    :use-module ((euphrates path-get-dirname) :select (path-get-dirname))
    :use-module ((euphrates path-normalize) :select (path-normalize))
    :use-module ((euphrates path-replace-extension) :select (path-replace-extension))
    :use-module ((euphrates path-without-extension) :select (path-without-extension))
    :use-module ((euphrates path-without-extensions) :select (path-without-extensions))
    :use-module ((euphrates petri-error-handling) :select (patri-handle-make-callback petri-handle-get))
    :use-module ((euphrates petri-net-make) :select (petri-net-make))
    :use-module ((euphrates petri-net-obj) :select (petri-net-obj petri-net-obj-critical petri-net-obj-finished? petri-net-obj-queue petri-net-obj-transitions petri-net-obj? set-petri-net-obj-finished?!))
    :use-module ((euphrates petri-net-parse-profun) :select (petri-profun-net))
    :use-module ((euphrates petri-net-parse) :select (petri-lambda-net petri-net-parse))
    :use-module ((euphrates petri) :select (petri-push petri-run))
    :use-module ((euphrates prefixtree-obj) :select (prefixtree prefixtree-children prefixtree-value prefixtree? set-prefixtree-children! set-prefixtree-value!))
    :use-module ((euphrates prefixtree) :select (make-prefixtree prefixtree->tree prefixtree-ref prefixtree-ref-closest prefixtree-ref-furthest prefixtree-set!))
    :use-module ((euphrates print-in-frame) :select (print-in-frame))
    :use-module ((euphrates print-in-window) :select (print-in-window))
    :use-module ((euphrates printable-alphabet) :select (printable/alphabet))
    :use-module ((euphrates printable-stable-alphabet) :select (printable/stable/alphabet))
    :use-module ((euphrates printf) :select (printf))
    :use-module ((euphrates profun-CR) :select (make-profun-CR profun-CR-what profun-CR?))
    :use-module ((euphrates profun-IDR) :select (make-profun-IDR profun-IDR-arity profun-IDR-name profun-IDR?))
    :use-module ((euphrates profun-RFC) :select (make-profun-RFC profun-RFC-add-info profun-RFC-insert profun-RFC-modify-iter profun-RFC-reset profun-RFC-set-iter profun-RFC-what profun-RFC?))
    :use-module ((euphrates profun-abort) :select (make-profun-abort profun-abort-add-info profun-abort-additional profun-abort-iter profun-abort-modify-iter profun-abort-set-iter profun-abort-type profun-abort-what profun-abort?))
    :use-module ((euphrates profun-accept) :select (make-profun-accept profun-accept profun-accept-alist profun-accept-ctx profun-accept-ctx-changed? profun-accept? profun-ctx-set profun-set profun-set-meta profun-set-parameter))
    :use-module ((euphrates profun-answer-huh) :select (profun-answer?))
    :use-module ((euphrates profun-answer-join) :select (profun-answer-join/and profun-answer-join/any profun-answer-join/or))
    :use-module ((euphrates profun-current-env-p) :select (profun-current-env/p))
    :use-module ((euphrates profun-database) :select (make-falsy-profun-database make-profun-database profun-database-copy profun-database-extend profun-database-falsy? profun-database-get profun-database-get-all profun-database-handle profun-database-handler profun-database-rules profun-database?))
    :use-module ((euphrates profun-default) :select (profun-default))
    :use-module ((euphrates profun-env) :select (make-profun-env profun-env-copy profun-env-get profun-env-set! profun-env-unset!))
    :use-module ((euphrates profun-error) :select (make-profun-error profun-error-args profun-error?))
    :use-module ((euphrates profun-handler) :select (profun-handler-extend profun-handler-get profun-make-handler))
    :use-module ((euphrates profun-instruction) :select (profun-instruction-args profun-instruction-arity profun-instruction-body profun-instruction-build profun-instruction-build/next profun-instruction-constructor profun-instruction-context profun-instruction-name profun-instruction-next profun-instruction?))
    :use-module ((euphrates profun-iterator) :select (profun-abort-insert profun-abort-reset profun-iterator-constructor profun-iterator-copy profun-iterator-db profun-iterator-env profun-iterator-insert! profun-iterator-query profun-iterator-reset! profun-iterator-state set-profun-iterator-query! set-profun-iterator-state!))
    :use-module ((euphrates profun-make-instantiation-test) :select (profun-make-instantiation-check))
    :use-module ((euphrates profun-make-set) :select (profun-make-set))
    :use-module ((euphrates profun-make-tuple-set) :select (profun-make-tuple-set))
    :use-module ((euphrates profun-meta-key) :select (profun-meta-key))
    :use-module ((euphrates profun-op-apply-result-p) :select (profun-op-apply/result#p))
    :use-module ((euphrates profun-op-apply) :select (profun-apply-fail! profun-apply-return! profun-op-apply))
    :use-module ((euphrates profun-op-binary) :select (profun-op-binary))
    :use-module ((euphrates profun-op-divisible) :select (profun-op-divisible))
    :use-module ((euphrates profun-op-envlambda) :select (profun-op-envlambda))
    :use-module ((euphrates profun-op-equals) :select (profun-op-equals))
    :use-module ((euphrates profun-op-eval-result-p) :select (profun-op-eval/result#p))
    :use-module ((euphrates profun-op-eval) :select (profun-eval-fail! profun-eval-return! profun-op-eval))
    :use-module ((euphrates profun-op-false) :select (profun-op-false))
    :use-module ((euphrates profun-op-function) :select (profun-op-function))
    :use-module ((euphrates profun-op-lambda) :select (profun-op-lambda))
    :use-module ((euphrates profun-op-less) :select (profun-op-less))
    :use-module ((euphrates profun-op-modulo) :select (profun-op-modulo))
    :use-module ((euphrates profun-op-mult) :select (profun-op*))
    :use-module ((euphrates profun-op-obj) :select (profun-op-arity profun-op-constructor profun-op-procedure profun-op?))
    :use-module ((euphrates profun-op-parameter) :select (instantiate-profun-parameter make-profun-parameter))
    :use-module ((euphrates profun-op-plus) :select (profun-op+))
    :use-module ((euphrates profun-op-print) :select (profun-op-print))
    :use-module ((euphrates profun-op-separate) :select (profun-op-separate))
    :use-module ((euphrates profun-op-sqrt) :select (profun-op-sqrt))
    :use-module ((euphrates profun-op-true) :select (profun-op-true))
    :use-module ((euphrates profun-op-unary) :select (profun-op-unary))
    :use-module ((euphrates profun-op-unify) :select (profun-op-unify))
    :use-module ((euphrates profun-op-value) :select (profun-op-value))
    :use-module ((euphrates profun-op) :select (make-profun-op))
    :use-module ((euphrates profun-query-get-free-variables) :select (profun-query-get-free-variables))
    :use-module ((euphrates profun-query-handle-underscores) :select (profun-query-handle-underscores))
    :use-module ((euphrates profun-reject) :select (profun-reject profun-reject?))
    :use-module ((euphrates profun-request-value) :select (profun-request-value))
    :use-module ((euphrates profun-rule) :select (profun-rule-args profun-rule-body profun-rule-constructor profun-rule-index profun-rule-name profun-rule?))
    :use-module ((euphrates profun-standard-handler) :select (profun-standard-handler))
    :use-module ((euphrates profun-state) :select (profun-state-build profun-state-constructor profun-state-current profun-state-failstate profun-state-final? profun-state-finish profun-state-make profun-state-stack profun-state-undo profun-state? set-profun-state-current))
    :use-module ((euphrates profun-value) :select (profun-bound-value? profun-make-constant profun-make-unbound-var profun-make-var profun-unbound-value? profun-value-name profun-value-unwrap profun-value?))
    :use-module ((euphrates profun-variable-arity-op-huh) :select (profun-variable-arity-op?))
    :use-module ((euphrates profun-variable-arity-op-keyword) :select (profun-variable-arity-op-keyword))
    :use-module ((euphrates profun-variable-arity-op) :select (profun-variable-arity-op))
    :use-module ((euphrates profun-variable-equal-q) :select (profun-variable-equal?))
    :use-module ((euphrates profun-varname-q) :select (profun-varname?))
    :use-module ((euphrates profun) :select (profun-create-database profun-create-falsy-database profun-eval-query profun-eval-query/boolean profun-iterate profun-next profun-next/boolean))
    :use-module ((euphrates profune-communications-hook-p) :select (profune-communications-hook/p))
    :use-module ((euphrates profune-communications) :select (profune-communications))
    :use-module ((euphrates profune-communicator) :select (make-profune-communicator profune-communicator-db profune-communicator-handle profune-communicator?))
    :use-module ((euphrates properties) :select (define-property))
    :use-module ((euphrates queue-obj) :select (queue-constructor queue-first queue-last queue-predicate queue-vector set-queue-first! set-queue-last! set-queue-vector!))
    :use-module ((euphrates queue) :select (list->queue make-queue queue->list queue-empty? queue-peek queue-peek-rotate! queue-pop! queue-push! queue-rotate! queue-unload! queue?))
    :use-module ((euphrates raisu) :select (raisu))
    :use-module ((euphrates random-choice) :select (random-choice))
    :use-module ((euphrates random-variable-name) :select (random-variable-name))
    :use-module ((euphrates range) :select (range))
    :use-module ((euphrates read-all-port) :select (read-all-port))
    :use-module ((euphrates read-lines) :select (read/lines))
    :use-module ((euphrates read-list) :select (read-list))
    :use-module ((euphrates read-string-file) :select (read-string-file))
    :use-module ((euphrates read-string-line) :select (read-string-line))
    :use-module ((euphrates regex-machine) :select (make-regex-machine make-regex-machine* make-regex-machine/full))
    :use-module ((euphrates remove-common-prefix) :select (remove-common-prefix))
    :use-module ((euphrates replacement-monad) :select (replacement-monad))
    :use-module ((euphrates replicate) :select (replicate))
    :use-module ((euphrates reversed-args-f) :select (reversed-args-f))
    :use-module ((euphrates reversed-args) :select (reversed-args))
    :use-module ((euphrates rtree) :select (rtree rtree-children rtree-ref rtree-value rtree? set-rtree-children! set-rtree-ref!))
    :use-module ((euphrates run-asyncproc-p-default) :select (run-asyncproc/p-default))
    :use-module ((euphrates run-asyncproc-p) :select (run-asyncproc/p))
    :use-module ((euphrates run-asyncproc) :select (run-asyncproc))
    :use-module ((euphrates run-syncproc-re-star) :select (run-syncproc/re*))
    :use-module ((euphrates run-syncproc-re) :select (run-syncproc/re))
    :use-module ((euphrates run-syncproc-star) :select (run-syncproc*))
    :use-module ((euphrates run-syncproc) :select (run-syncproc))
    :use-module ((euphrates serialization-builtin-natural) :select (deserialize-builtin/natural serialize-builtin/natural))
    :use-module ((euphrates serialization-builtin-short) :select (deserialize-builtin/short serialize-builtin/short))
    :use-module ((euphrates serialization-human) :select (deserialize/human serialize/human))
    :use-module ((euphrates serialization-runnable) :select (deserialize/runnable serialize/runnable))
    :use-module ((euphrates serialization-sexp-generic) :select (deserialize/sexp/generic serialize/sexp/generic))
    :use-module ((euphrates serialization-sexp-natural) :select (deserialize/sexp/natural serialize/sexp/natural))
    :use-module ((euphrates serialization-sexp-short) :select (deserialize/sexp/short serialize/sexp/short))
    :use-module ((euphrates serialization-short) :select (deserialize/short serialize/short))
    :use-module ((euphrates shell-nondisrupt-alphabet) :select (shell-nondisrupt/alphabet shell-nondisrupt/alphabet/index))
    :use-module ((euphrates shell-quote-permissive) :select (shell-quote/permissive))
    :use-module ((euphrates shell-quote) :select (shell-quote shell-quote/always/list))
    :use-module ((euphrates shell-safe-alphabet) :select (shell-safe/alphabet shell-safe/alphabet/index))
    :use-module ((euphrates sleep-until) :select (sleep-until))
    :use-module ((euphrates srfi-27-backbone-generator) :select (mrg32k3a-pack-state mrg32k3a-random-integer mrg32k3a-random-range mrg32k3a-random-real mrg32k3a-unpack-state))
    :use-module ((euphrates srfi-27-generic) :select (default-random-source make-random-source random-source-make-integers random-source-make-reals random-source-pseudo-randomize! random-source-randomize! random-source-state-ref random-source-state-set! random-source?))
    :use-module ((euphrates srfi-27-random-source-obj) :select (:random-source-current-time :random-source-make :random-source-make-integers :random-source-make-reals :random-source-pseudo-randomize! :random-source-randomize! :random-source-state-ref :random-source-state-set! :random-source?))
    :use-module ((euphrates stack-obj) :select (set-stack-lst! stack-constructor stack-lst stack-predicate))
    :use-module ((euphrates stack) :select (list->stack stack->list stack-discard! stack-empty? stack-make stack-peek stack-pop! stack-push! stack-unload! stack?))
    :use-module ((euphrates string-drop-n) :select (string-drop-n))
    :use-module ((euphrates string-null-or-whitespace-p) :select (string-null-or-whitespace?))
    :use-module ((euphrates string-pad) :select (string-pad-L string-pad-R))
    :use-module ((euphrates string-plus-encode) :select (string-plus-encode string-plus-encode/generic string-plus-encoding-make))
    :use-module ((euphrates string-split-3) :select (string-split-3))
    :use-module ((euphrates string-split-simple) :select (string-split/simple))
    :use-module ((euphrates string-strip) :select (string-strip))
    :use-module ((euphrates string-take-n) :select (string-take-n))
    :use-module ((euphrates string-to-lines) :select (string->lines))
    :use-module ((euphrates string-to-numstring) :select (string->numstring))
    :use-module ((euphrates string-to-seconds-columned) :select (string->seconds/columned))
    :use-module ((euphrates string-to-seconds) :select (string->seconds))
    :use-module ((euphrates string-to-words) :select (string->words))
    :use-module ((euphrates string-trim-chars) :select (string-trim-chars))
    :use-module ((euphrates stringf) :select (stringf))
    :use-module ((euphrates syntax-append) :select (syntax-append))
    :use-module ((euphrates syntax-flatten-star) :select (syntax-flatten*))
    :use-module ((euphrates syntax-identity) :select (syntax-identity))
    :use-module ((euphrates syntax-map-noeval) :select (syntax-map/noeval))
    :use-module ((euphrates syntax-map) :select (syntax-map))
    :use-module ((euphrates syntax-reverse) :select (syntax-reverse))
    :use-module ((euphrates syntax-tree-foreach) :select (syntax-tree-foreach))
    :use-module ((euphrates sys-mutex-lock) :select (sys-mutex-lock!))
    :use-module ((euphrates sys-mutex-make) :select (sys-mutex-make))
    :use-module ((euphrates sys-mutex-unlock) :select (sys-mutex-unlock!))
    :use-module ((euphrates sys-thread-current-p-default) :select (sys-thread-current#p-default))
    :use-module ((euphrates sys-thread-current-p) :select (sys-thread-current#p))
    :use-module ((euphrates sys-thread-obj) :select (set-sys-thread-obj-cancel-enabled?! set-sys-thread-obj-cancel-scheduled?! set-sys-thread-obj-handle! sys-thread-obj sys-thread-obj-cancel-enabled? sys-thread-obj-cancel-scheduled? sys-thread-obj-handle sys-thread-obj?))
    :use-module ((euphrates sys-thread) :select (sys-thread-cancel sys-thread-current sys-thread-disable-cancel sys-thread-enable-cancel sys-thread-mutex-lock! sys-thread-mutex-make sys-thread-mutex-unlock! sys-thread-sleep sys-thread-spawn))
    :use-module ((euphrates sys-usleep) :select (sys-usleep))
    :use-module ((euphrates system-environment-get-all) :select (system-environment-get-all))
    :use-module ((euphrates system-environment) :select (system-environment-get system-environment-set!))
    :use-module ((euphrates system-fmt) :select (system-fmt))
    :use-module ((euphrates system-re) :select (system-re))
    :use-module ((euphrates system-star-exit-code) :select (system*/exit-code))
    :use-module ((euphrates tilda-a) :select (~a))
    :use-module ((euphrates tilda-s) :select (~s))
    :use-module ((euphrates time-get-current-unixtime-values-p-default) :select (time-get-current-unixtime/values#p-default))
    :use-module ((euphrates time-get-current-unixtime-values-p) :select (time-get-current-unixtime/values#p))
    :use-module ((euphrates time-get-current-unixtime) :select (time-get-current-unixtime time-get-current-unixtime/values))
    :use-module ((euphrates time-get-fast-parameterizeable-timestamp) :select (time-get-fast-parameterizeable-timestamp))
    :use-module ((euphrates time-get-monotonic-nanoseconds-timestamp) :select (time-get-monotonic-nanoseconds-timestamp))
    :use-module ((euphrates time-to-string) :select (seconds->H/M/s seconds->M/s seconds->time-string))
    :use-module ((euphrates tree-map-leafs) :select (tree-map-leafs))
    :use-module ((euphrates un-tilda-s) :select (un~s))
    :use-module ((euphrates uni-critical) :select (uni-critical-make))
    :use-module ((euphrates uni-spinlock) :select (make-uni-spinlock make-uni-spinlock-critical uni-spinlock-lock! uni-spinlock-unlock!))
    :use-module ((euphrates unit-conversions) :select (centi->centi/unit centi->day/unit centi->deci/unit centi->deka/unit centi->gibi/unit centi->giga/unit centi->hecto/unit centi->hour/unit centi->kibi/unit centi->kilo/unit centi->mebi/unit centi->mega/unit centi->micro/unit centi->milli/unit centi->minute/unit centi->nano/unit centi->normal/unit centi->pebi/unit centi->peta/unit centi->pico/unit centi->week/unit day->centi/unit day->day/unit day->deci/unit day->deka/unit day->gibi/unit day->giga/unit day->hecto/unit day->hour/unit day->kibi/unit day->kilo/unit day->mebi/unit day->mega/unit day->micro/unit day->milli/unit day->minute/unit day->nano/unit day->normal/unit day->pebi/unit day->peta/unit day->pico/unit day->week/unit deci->centi/unit deci->day/unit deci->deci/unit deci->deka/unit deci->gibi/unit deci->giga/unit deci->hecto/unit deci->hour/unit deci->kibi/unit deci->kilo/unit deci->mebi/unit deci->mega/unit deci->micro/unit deci->milli/unit deci->minute/unit deci->nano/unit deci->normal/unit deci->pebi/unit deci->peta/unit deci->pico/unit deci->week/unit deka->centi/unit deka->day/unit deka->deci/unit deka->deka/unit deka->gibi/unit deka->giga/unit deka->hecto/unit deka->hour/unit deka->kibi/unit deka->kilo/unit deka->mebi/unit deka->mega/unit deka->micro/unit deka->milli/unit deka->minute/unit deka->nano/unit deka->normal/unit deka->pebi/unit deka->peta/unit deka->pico/unit deka->week/unit gibi->centi/unit gibi->day/unit gibi->deci/unit gibi->deka/unit gibi->gibi/unit gibi->giga/unit gibi->hecto/unit gibi->hour/unit gibi->kibi/unit gibi->kilo/unit gibi->mebi/unit gibi->mega/unit gibi->micro/unit gibi->milli/unit gibi->minute/unit gibi->nano/unit gibi->normal/unit gibi->pebi/unit gibi->peta/unit gibi->pico/unit gibi->week/unit giga->centi/unit giga->day/unit giga->deci/unit giga->deka/unit giga->gibi/unit giga->giga/unit giga->hecto/unit giga->hour/unit giga->kibi/unit giga->kilo/unit giga->mebi/unit giga->mega/unit giga->micro/unit giga->milli/unit giga->minute/unit giga->nano/unit giga->normal/unit giga->pebi/unit giga->peta/unit giga->pico/unit giga->week/unit hecto->centi/unit hecto->day/unit hecto->deci/unit hecto->deka/unit hecto->gibi/unit hecto->giga/unit hecto->hecto/unit hecto->hour/unit hecto->kibi/unit hecto->kilo/unit hecto->mebi/unit hecto->mega/unit hecto->micro/unit hecto->milli/unit hecto->minute/unit hecto->nano/unit hecto->normal/unit hecto->pebi/unit hecto->peta/unit hecto->pico/unit hecto->week/unit hour->centi/unit hour->day/unit hour->deci/unit hour->deka/unit hour->gibi/unit hour->giga/unit hour->hecto/unit hour->hour/unit hour->kibi/unit hour->kilo/unit hour->mebi/unit hour->mega/unit hour->micro/unit hour->milli/unit hour->minute/unit hour->nano/unit hour->normal/unit hour->pebi/unit hour->peta/unit hour->pico/unit hour->week/unit kibi->centi/unit kibi->day/unit kibi->deci/unit kibi->deka/unit kibi->gibi/unit kibi->giga/unit kibi->hecto/unit kibi->hour/unit kibi->kibi/unit kibi->kilo/unit kibi->mebi/unit kibi->mega/unit kibi->micro/unit kibi->milli/unit kibi->minute/unit kibi->nano/unit kibi->normal/unit kibi->pebi/unit kibi->peta/unit kibi->pico/unit kibi->week/unit kilo->centi/unit kilo->day/unit kilo->deci/unit kilo->deka/unit kilo->gibi/unit kilo->giga/unit kilo->hecto/unit kilo->hour/unit kilo->kibi/unit kilo->kilo/unit kilo->mebi/unit kilo->mega/unit kilo->micro/unit kilo->milli/unit kilo->minute/unit kilo->nano/unit kilo->normal/unit kilo->pebi/unit kilo->peta/unit kilo->pico/unit kilo->week/unit mebi->centi/unit mebi->day/unit mebi->deci/unit mebi->deka/unit mebi->gibi/unit mebi->giga/unit mebi->hecto/unit mebi->hour/unit mebi->kibi/unit mebi->kilo/unit mebi->mebi/unit mebi->mega/unit mebi->micro/unit mebi->milli/unit mebi->minute/unit mebi->nano/unit mebi->normal/unit mebi->pebi/unit mebi->peta/unit mebi->pico/unit mebi->week/unit mega->centi/unit mega->day/unit mega->deci/unit mega->deka/unit mega->gibi/unit mega->giga/unit mega->hecto/unit mega->hour/unit mega->kibi/unit mega->kilo/unit mega->mebi/unit mega->mega/unit mega->micro/unit mega->milli/unit mega->minute/unit mega->nano/unit mega->normal/unit mega->pebi/unit mega->peta/unit mega->pico/unit mega->week/unit micro->centi/unit micro->day/unit micro->deci/unit micro->deka/unit micro->gibi/unit micro->giga/unit micro->hecto/unit micro->hour/unit micro->kibi/unit micro->kilo/unit micro->mebi/unit micro->mega/unit micro->micro/unit micro->milli/unit micro->minute/unit micro->nano/unit micro->normal/unit micro->pebi/unit micro->peta/unit micro->pico/unit micro->week/unit milli->centi/unit milli->day/unit milli->deci/unit milli->deka/unit milli->gibi/unit milli->giga/unit milli->hecto/unit milli->hour/unit milli->kibi/unit milli->kilo/unit milli->mebi/unit milli->mega/unit milli->micro/unit milli->milli/unit milli->minute/unit milli->nano/unit milli->normal/unit milli->pebi/unit milli->peta/unit milli->pico/unit milli->week/unit minute->centi/unit minute->day/unit minute->deci/unit minute->deka/unit minute->gibi/unit minute->giga/unit minute->hecto/unit minute->hour/unit minute->kibi/unit minute->kilo/unit minute->mebi/unit minute->mega/unit minute->micro/unit minute->milli/unit minute->minute/unit minute->nano/unit minute->normal/unit minute->pebi/unit minute->peta/unit minute->pico/unit minute->week/unit nano->centi/unit nano->day/unit nano->deci/unit nano->deka/unit nano->gibi/unit nano->giga/unit nano->hecto/unit nano->hour/unit nano->kibi/unit nano->kilo/unit nano->mebi/unit nano->mega/unit nano->micro/unit nano->milli/unit nano->minute/unit nano->nano/unit nano->normal/unit nano->pebi/unit nano->peta/unit nano->pico/unit nano->week/unit normal->centi/unit normal->day/unit normal->deci/unit normal->deka/unit normal->gibi/unit normal->giga/unit normal->hecto/unit normal->hour/unit normal->kibi/unit normal->kilo/unit normal->mebi/unit normal->mega/unit normal->micro/unit normal->milli/unit normal->minute/unit normal->nano/unit normal->normal/unit normal->pebi/unit normal->peta/unit normal->pico/unit normal->week/unit pebi->centi/unit pebi->day/unit pebi->deci/unit pebi->deka/unit pebi->gibi/unit pebi->giga/unit pebi->hecto/unit pebi->hour/unit pebi->kibi/unit pebi->kilo/unit pebi->mebi/unit pebi->mega/unit pebi->micro/unit pebi->milli/unit pebi->minute/unit pebi->nano/unit pebi->normal/unit pebi->pebi/unit pebi->peta/unit pebi->pico/unit pebi->week/unit peta->centi/unit peta->day/unit peta->deci/unit peta->deka/unit peta->gibi/unit peta->giga/unit peta->hecto/unit peta->hour/unit peta->kibi/unit peta->kilo/unit peta->mebi/unit peta->mega/unit peta->micro/unit peta->milli/unit peta->minute/unit peta->nano/unit peta->normal/unit peta->pebi/unit peta->peta/unit peta->pico/unit peta->week/unit pico->centi/unit pico->day/unit pico->deci/unit pico->deka/unit pico->gibi/unit pico->giga/unit pico->hecto/unit pico->hour/unit pico->kibi/unit pico->kilo/unit pico->mebi/unit pico->mega/unit pico->micro/unit pico->milli/unit pico->minute/unit pico->nano/unit pico->normal/unit pico->pebi/unit pico->peta/unit pico->pico/unit pico->week/unit week->centi/unit week->day/unit week->deci/unit week->deka/unit week->gibi/unit week->giga/unit week->hecto/unit week->hour/unit week->kibi/unit week->kilo/unit week->mebi/unit week->mega/unit week->micro/unit week->milli/unit week->minute/unit week->nano/unit week->normal/unit week->pebi/unit week->peta/unit week->pico/unit week->week/unit))
    :use-module ((euphrates universal-lockr-unlockr) :select (universal-lockr! universal-unlockr!))
    :use-module ((euphrates universal-usleep) :select (universal-usleep))
    :use-module ((euphrates uri-encode) :select (uri-encode))
    :use-module ((euphrates uri-safe-alphabet) :select (uri-safe/alphabet uri-safe/alphabet/index))
    :use-module ((euphrates url-decompose) :select (url-decompose))
    :use-module ((euphrates url-get-fragment) :select (url-get-fragment))
    :use-module ((euphrates url-get-hostname-and-port) :select (url-get-hostname-and-port))
    :use-module ((euphrates url-get-path) :select (url-get-path))
    :use-module ((euphrates url-get-protocol) :select (url-get-protocol))
    :use-module ((euphrates url-get-query) :select (url-get-query))
    :use-module ((euphrates url-goto) :select (url-goto))
    :use-module ((euphrates usymbol) :select (make-usymbol usymbol-name usymbol-qualifier usymbol?))
    :use-module ((euphrates vector-random-shuffle-bang) :select (vector-random-shuffle!))
    :use-module ((euphrates with-critical) :select (with-critical))
    :use-module ((euphrates with-dynamic-set) :select (with-dynamic-set!))
    :use-module ((euphrates with-dynamic) :select (with-dynamic))
    :use-module ((euphrates with-ignore-errors) :select (with-ignore-errors!))
    :use-module ((euphrates with-monad) :select (with-monad))
    :use-module ((euphrates with-randomizer-seed) :select (with-randomizer-seed))
    :use-module ((euphrates with-singlethread-env) :select (with-singlethread-env))
    :use-module ((euphrates words-to-string) :select (words->string))
    :use-module ((euphrates write-string-file) :select (write-string-file))
    )))



(+ 2 2)
